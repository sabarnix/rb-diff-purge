diff --git a/RbDiffApp/.travis.yml b/RbDiffApp/.travis.yml
index e522d8e..9f61378 100644
--- a/RbDiffApp/.travis.yml
+++ b/RbDiffApp/.travis.yml
@@ -1,18 +1,27 @@
 language: node_js
-sudo: true
-dist: trusty
+
 node_js:
-  - "5.0"
+  - 6
+  - 5
+  - 4
+
 script: npm run build
+
+install:
+  - npm i -g npm@latest
+  - npm install
+
 before_install:
-  - export CHROME_BIN=/usr/bin/google-chrome
+  - export CHROME_BIN=chromium-browser
   - export DISPLAY=:99.0
-  - sudo apt-get update
-  - sudo apt-get install -y libappindicator1 fonts-liberation
-  - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
-  - sudo dpkg -i google-chrome*.deb
   - sh -e /etc/init.d/xvfb start
+
 notifications:
   email:
     on_failure: change
+
 after_success: 'npm run coveralls'
+
+cache:
+  directories:
+    - node_modules
diff --git a/RbDiffApp/Changelog.md b/RbDiffApp/Changelog.md
index d50f6c6..077c426 100644
--- a/RbDiffApp/Changelog.md
+++ b/RbDiffApp/Changelog.md
@@ -26,7 +26,7 @@ website!
   "Smart" containers are now isolated from stateless and/or generic components,
   tests are now co-located with the code that they validate.
 
-- **New industry-standard JS utilties** We're now making the most of...
+- **New industry-standard JS utilities** We're now making the most of...
     - ImmutableJS
     - reselect
     - react-router-redux
diff --git a/RbDiffApp/LICENSE.md b/RbDiffApp/LICENSE.md
index 39cb81e..3a2e067 100644
--- a/RbDiffApp/LICENSE.md
+++ b/RbDiffApp/LICENSE.md
@@ -1,6 +1,6 @@
 The MIT License (MIT)
 
-Copyright (c) 2015 Maximilian Stoiber
+Copyright (c) 2016 Maximilian Stoiber
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/RbDiffApp/README.md b/RbDiffApp/README.md
index e96dc60..90d55e0 100644
--- a/RbDiffApp/README.md
+++ b/RbDiffApp/README.md
@@ -34,6 +34,9 @@
   <a href="#sponsors">
     <img src="https://opencollective.com/react-boilerplate/sponsors/badge.svg" alt="Sponsors" />
   </a>
+  <a href="http://thinkmill.com.au/?utm_source=github&utm_medium=badge&utm_campaign=react-boilerplate">
+    <img alt="Supported by Thinkmill" src="https://thinkmill.github.io/badge/heart.svg" />
+  </a>
   <!-- Gitter -->
   <a href="https://gitter.im/mxstbr/react-boilerplate">
     <img src="https://camo.githubusercontent.com/54dc79dc7da6b76b17bc8013342da9b4266d993c/68747470733a2f2f6261646765732e6769747465722e696d2f6d78737462722f72656163742d626f696c6572706c6174652e737667" alt="Gitter Chat" />
diff --git a/RbDiffApp/app/app.js b/RbDiffApp/app/app.js
index 984c443..13b72ca 100644
--- a/RbDiffApp/app/app.js
+++ b/RbDiffApp/app/app.js
@@ -22,7 +22,7 @@ import { Provider } from 'react-redux';
 import { applyRouterMiddleware, Router, browserHistory } from 'react-router';
 import { syncHistoryWithStore } from 'react-router-redux';
 import FontFaceObserver from 'fontfaceobserver';
-import useScroll from 'react-router-scroll';
+import { useScroll } from 'react-router-scroll';
 import configureStore from './store';
 
 // Import Language Provider
@@ -75,10 +75,10 @@ const rootRoute = {
   childRoutes: createRoutes(store),
 };
 
-const render = (translatedMessages) => {
+const render = (messages) => {
   ReactDOM.render(
     <Provider store={store}>
-      <LanguageProvider messages={translatedMessages}>
+      <LanguageProvider messages={messages}>
         <Router
           history={history}
           routes={rootRoute}
diff --git a/RbDiffApp/app/components/A/index.js b/RbDiffApp/app/components/A/index.js
index 0ec0e16..62634e9 100644
--- a/RbDiffApp/app/components/A/index.js
+++ b/RbDiffApp/app/components/A/index.js
@@ -6,14 +6,17 @@ import React, { PropTypes } from 'react';
 
 import styles from './styles.css';
 
-function A(props) {
+function A({ ...props }) {
+  const { className, children, href, target, ...rest } = props;
   return (
     <a
-      className={
-        props.className || styles.link
-      }
-      {...props}
-    />
+      href={href}
+      target={target}
+      className={className || styles.link}
+      {...rest}
+    >
+      { children }
+    </a>
   );
 }
 
diff --git a/RbDiffApp/app/components/A/tests/index.test.js b/RbDiffApp/app/components/A/tests/index.test.js
index c732ac6..e8161e0 100644
--- a/RbDiffApp/app/components/A/tests/index.test.js
+++ b/RbDiffApp/app/components/A/tests/index.test.js
@@ -8,29 +8,45 @@ import expect from 'expect';
 import { shallow } from 'enzyme';
 import React from 'react';
 
+const href = 'http://mxstbr.com/';
+const children = (<h1>Test</h1>);
+const renderComponent = (props = {}) => shallow(
+  <A href={href} {...props}>
+    {children}
+  </A>
+);
+
 describe('<A />', () => {
-  it('should render its children', () => {
-    const children = (<h1>Test</h1>);
-    const renderedComponent = shallow(
-      <A>
-        {children}
-      </A>
-    );
+  it('should render an <a> tag', () => {
+    const renderedComponent = renderComponent();
+    expect(renderedComponent.type()).toEqual('a');
+  });
+
+  it('should have an href attribute', () => {
+    const renderedComponent = renderComponent();
+    expect(renderedComponent.prop('href')).toEqual(href);
+  });
+
+  it('should have children', () => {
+    const renderedComponent = renderComponent();
     expect(renderedComponent.contains(children)).toEqual(true);
   });
 
-  it('should adopt the className', () => {
-    const renderedComponent = shallow(<A className="test" />);
-    expect(renderedComponent.find('a').hasClass('test')).toEqual(true);
+  it('should adopt a className attribute', () => {
+    const className = 'test';
+    const renderedComponent = renderComponent({ className });
+    expect(renderedComponent.find('a').hasClass(className)).toEqual(true);
   });
 
-  it('should adopt the href', () => {
-    const renderedComponent = shallow(<A href="mxstbr.com" />);
-    expect(renderedComponent.prop('href')).toEqual('mxstbr.com');
+  it('should adopt a target attribute', () => {
+    const target = '_blank';
+    const renderedComponent = renderComponent({ target });
+    expect(renderedComponent.prop('target')).toEqual(target);
   });
 
-  it('should adopt the target', () => {
-    const renderedComponent = shallow(<A target="_blank" />);
-    expect(renderedComponent.prop('target')).toEqual('_blank');
+  it('should adopt a type attribute', () => {
+    const type = 'text/html';
+    const renderedComponent = renderComponent({ type });
+    expect(renderedComponent.prop('type')).toEqual(type);
   });
 });
diff --git a/RbDiffApp/app/components/Button/styles.css b/RbDiffApp/app/components/Button/styles.css
index 6bc2fc3..15f59fe 100644
--- a/RbDiffApp/app/components/Button/styles.css
+++ b/RbDiffApp/app/components/Button/styles.css
@@ -9,7 +9,6 @@
   box-sizing: border-box;
   padding: 0.25em 2em;
   margin: 0;
-  border: 0;
   text-decoration: none;
   border-radius: 4px;
   -webkit-font-smoothing: antialiased;
@@ -20,7 +19,6 @@
   font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
   font-weight: bold;
   font-size: 16px;
-  color: #FFF;
   border: 2px solid #41ADDD;
   color: #41ADDD;
 }
diff --git a/RbDiffApp/app/components/Button/tests/index.test.js b/RbDiffApp/app/components/Button/tests/index.test.js
index 03bdf94..be6fd3a 100644
--- a/RbDiffApp/app/components/Button/tests/index.test.js
+++ b/RbDiffApp/app/components/Button/tests/index.test.js
@@ -8,37 +8,53 @@ import expect from 'expect';
 import { shallow } from 'enzyme';
 import React from 'react';
 
-describe('<Button />', () => {
-  it('should render its children', () => {
-    const children = (<h1>Test</h1>);
-    const renderedComponent = shallow(
-      <Button href="http://mxstbr.com">
-        {children}
-      </Button>
-    );
-    expect(renderedComponent.contains(children)).toEqual(true);
-  });
-
-  it('should adopt the className', () => {
-    const renderedComponent = shallow(<Button className="test" />);
-    expect(renderedComponent.find('a').hasClass('test')).toEqual(true);
-  });
+const handleRoute = () => {};
+const href = 'http://mxstbr.com';
+const children = (<h1>Test</h1>);
+const renderComponent = (props = {}) => shallow(
+  <Button href={href} {...props}>
+    {children}
+  </Button>
+);
 
+describe('<Button />', () => {
   it('should render an <a> tag if no route is specified', () => {
-    const renderedComponent = shallow(<Button href="http://mxstbr.com" />);
+    const renderedComponent = renderComponent({ href });
     expect(renderedComponent.find('a').length).toEqual(1);
   });
 
   it('should render a button to change route if the handleRoute prop is specified', () => {
-    const renderedComponent = shallow(<Button handleRoute={function handler() {}} />);
-
+    const renderedComponent = renderComponent({ handleRoute });
     expect(renderedComponent.find('button').length).toEqual(1);
   });
 
+  it('should have children', () => {
+    const renderedComponent = renderComponent();
+    expect(renderedComponent.contains(children)).toEqual(true);
+  });
+
   it('should handle click events', () => {
     const onClickSpy = expect.createSpy();
-    const renderedComponent = shallow(<Button onClick={onClickSpy} />);
+    const renderedComponent = renderComponent({ onClick: onClickSpy });
     renderedComponent.find('a').simulate('click');
     expect(onClickSpy).toHaveBeenCalled();
   });
+
+  it('should adopt a className attribute', () => {
+    const className = 'test';
+    const renderedComponent = renderComponent({ className });
+    expect(renderedComponent.find('a').hasClass(className)).toEqual(true);
+  });
+
+  it('should not adopt a type attribute when rendering an <a> tag', () => {
+    const type = 'text/html';
+    const renderedComponent = renderComponent({ href, type });
+    expect(renderedComponent.prop('type')).toNotExist();
+  });
+
+  it('should not adopt a type attribute when rendering a button', () => {
+    const type = 'submit';
+    const renderedComponent = renderComponent({ handleRoute, type });
+    expect(renderedComponent.prop('type')).toNotExist();
+  });
 });
diff --git a/RbDiffApp/app/components/Img/index.js b/RbDiffApp/app/components/Img/index.js
index 1bec09b..65d1fa1 100644
--- a/RbDiffApp/app/components/Img/index.js
+++ b/RbDiffApp/app/components/Img/index.js
@@ -15,7 +15,10 @@ function Img(props) {
 
 // We require the use of src and alt, only enforced by react in dev mode
 Img.propTypes = {
-  src: PropTypes.string.isRequired,
+  src: PropTypes.oneOfType([
+    PropTypes.string,
+    PropTypes.object,
+  ]).isRequired,
   alt: PropTypes.string.isRequired,
   className: PropTypes.string,
 };
diff --git a/RbDiffApp/app/components/Img/tests/index.test.js b/RbDiffApp/app/components/Img/tests/index.test.js
index ee527ab..a678611 100644
--- a/RbDiffApp/app/components/Img/tests/index.test.js
+++ b/RbDiffApp/app/components/Img/tests/index.test.js
@@ -4,14 +4,37 @@ import { expect } from 'chai';
 import { shallow } from 'enzyme';
 import React from 'react';
 
+const src = 'test.png';
+const alt = 'test';
+const renderComponent = (props = {}) => shallow(
+  <Img src={src} alt={alt} {...props} />
+);
+
 describe('<Img />', () => {
   it('should render an <img> tag', () => {
-    const renderedComponent = shallow(<Img src="test.png" alt="test" />);
+    const renderedComponent = renderComponent();
     expect(renderedComponent).to.have.tagName('img');
   });
 
+  it('should have an src attribute', () => {
+    const renderedComponent = renderComponent();
+    expect(renderedComponent).to.have.attr('src', src);
+  });
+
   it('should have an alt attribute', () => {
-    const renderedComponent = shallow(<Img src="test.png" alt="test" />);
-    expect(renderedComponent).to.have.attr('alt', 'test');
+    const renderedComponent = renderComponent();
+    expect(renderedComponent).to.have.attr('alt', alt);
+  });
+
+  it('should adopt a className attribute', () => {
+    const className = 'test';
+    const renderedComponent = renderComponent({ className });
+    expect(renderedComponent).to.have.attr('class', className);
+  });
+
+  it('should not adopt a srcset attribute', () => {
+    const srcset = 'test-HD.png 2x';
+    const renderedComponent = renderComponent({ srcset });
+    expect(renderedComponent).to.not.have.attr('srcset', srcset);
   });
 });
diff --git a/RbDiffApp/app/components/List/styles.css b/RbDiffApp/app/components/List/styles.css
index 9f1b7ba..c6b2f2d 100644
--- a/RbDiffApp/app/components/List/styles.css
+++ b/RbDiffApp/app/components/List/styles.css
@@ -11,7 +11,6 @@
 
 .list {
   list-style: none;
-  padding: 0;
   margin: 0;
   width: 100%;
   max-height: 30em;
diff --git a/RbDiffApp/app/containers/App/actions.js b/RbDiffApp/app/containers/App/actions.js
index c6e7294..ae04935 100644
--- a/RbDiffApp/app/containers/App/actions.js
+++ b/RbDiffApp/app/containers/App/actions.js
@@ -4,7 +4,7 @@
  * Actions change things in your application
  * Since this boilerplate uses a uni-directional data flow, specifically redux,
  * we have these actions which are the only way your application interacts with
- * your appliction state. This guarantees that your state is up to date and nobody
+ * your application state. This guarantees that your state is up to date and nobody
  * messes it up weirdly somewhere.
  *
  * To add a new Action:
diff --git a/RbDiffApp/app/containers/App/tests/index.test.js b/RbDiffApp/app/containers/App/tests/index.test.js
index f2487a4..ac16f87 100644
--- a/RbDiffApp/app/containers/App/tests/index.test.js
+++ b/RbDiffApp/app/containers/App/tests/index.test.js
@@ -1,10 +1,10 @@
+import App from '../index';
+import Footer from 'components/Footer';
+
 import expect from 'expect';
 import { shallow } from 'enzyme';
 import React from 'react';
 
-import App from '../index';
-import Footer from 'components/Footer';
-
 describe('<App />', () => {
   it('should render the logo', () => {
     const renderedComponent = shallow(
diff --git a/RbDiffApp/app/containers/FeaturePage/index.js b/RbDiffApp/app/containers/FeaturePage/index.js
index e8689af..f93e400 100644
--- a/RbDiffApp/app/containers/FeaturePage/index.js
+++ b/RbDiffApp/app/containers/FeaturePage/index.js
@@ -16,20 +16,8 @@ import H1 from 'components/H1';
 import styles from './styles.css';
 
 export class FeaturePage extends React.Component {
-  /**
-   * Changes the route
-   *
-   * @param  {string} route The route we want to go to
-   */
-  openRoute = (route) => {
-    this.props.changeRoute(route);
-  };
-
-  /**
-   * Changed route to '/'
-   */
   openHomePage = () => {
-    this.openRoute('/');
+    this.props.dispatch(push('/'));
   };
 
   render() {
@@ -97,14 +85,9 @@ export class FeaturePage extends React.Component {
     );
   }
 }
+
 FeaturePage.propTypes = {
-  changeRoute: React.PropTypes.func,
+  dispatch: React.PropTypes.func,
 };
 
-function mapDispatchToProps(dispatch) {
-  return {
-    changeRoute: (url) => dispatch(push(url)),
-  };
-}
-
-export default connect(null, mapDispatchToProps)(FeaturePage);
+export default connect()(FeaturePage);
diff --git a/RbDiffApp/app/containers/FeaturePage/tests/index.test.js b/RbDiffApp/app/containers/FeaturePage/tests/index.test.js
index 5ed742c..49fca03 100644
--- a/RbDiffApp/app/containers/FeaturePage/tests/index.test.js
+++ b/RbDiffApp/app/containers/FeaturePage/tests/index.test.js
@@ -1,8 +1,9 @@
 import expect from 'expect';
-import { shallow, mount } from 'enzyme';
+import { shallow } from 'enzyme';
 import React from 'react';
 
-import { IntlProvider, FormattedMessage } from 'react-intl';
+import Button from 'components/Button';
+import { FormattedMessage } from 'react-intl';
 import messages from '../messages';
 import { FeaturePage } from '../index';
 import H1 from 'components/H1';
@@ -19,23 +20,17 @@ describe('<FeaturePage />', () => {
     )).toEqual(true);
   });
 
-  it('should link to "/"', () => {
-    const openRouteSpy = expect.createSpy();
-
+  it('should link to "/"', (done) => {
     // Spy on the openRoute method of the FeaturePage
-    const openRoute = (dest) => {
-      if (dest === '/') {
-        openRouteSpy();
-      }
+    const dispatch = (action) => {
+      expect(action.payload.args).toEqual('/');
+      done();
     };
 
-    const renderedComponent = mount(
-      <IntlProvider locale="en">
-        <FeaturePage changeRoute={openRoute} />
-      </IntlProvider>
+    const renderedComponent = shallow(
+      <FeaturePage dispatch={dispatch} />
     );
-    const button = renderedComponent.find('button');
-    button.simulate('click');
-    expect(openRouteSpy).toHaveBeenCalled();
+    const button = renderedComponent.find(Button);
+    button.prop('handleRoute')();
   });
 });
diff --git a/RbDiffApp/app/containers/HomePage/actions.js b/RbDiffApp/app/containers/HomePage/actions.js
index 0533f36..7706bbb 100644
--- a/RbDiffApp/app/containers/HomePage/actions.js
+++ b/RbDiffApp/app/containers/HomePage/actions.js
@@ -4,7 +4,7 @@
  * Actions change things in your application
  * Since this boilerplate uses a uni-directional data flow, specifically redux,
  * we have these actions which are the only way your application interacts with
- * your appliction state. This guarantees that your state is up to date and nobody
+ * your application state. This guarantees that your state is up to date and nobody
  * messes it up weirdly somewhere.
  *
  * To add a new Action:
diff --git a/RbDiffApp/app/containers/HomePage/index.js b/RbDiffApp/app/containers/HomePage/index.js
index 835f3dd..835fcdf 100644
--- a/RbDiffApp/app/containers/HomePage/index.js
+++ b/RbDiffApp/app/containers/HomePage/index.js
@@ -143,7 +143,7 @@ HomePage.propTypes = {
   onChangeUsername: React.PropTypes.func,
 };
 
-function mapDispatchToProps(dispatch) {
+export function mapDispatchToProps(dispatch) {
   return {
     onChangeUsername: (evt) => dispatch(changeUsername(evt.target.value)),
     changeRoute: (url) => dispatch(push(url)),
diff --git a/RbDiffApp/app/containers/HomePage/tests/index.test.js b/RbDiffApp/app/containers/HomePage/tests/index.test.js
index e5b90fa..c189a9d 100644
--- a/RbDiffApp/app/containers/HomePage/tests/index.test.js
+++ b/RbDiffApp/app/containers/HomePage/tests/index.test.js
@@ -7,7 +7,10 @@ import { shallow, mount } from 'enzyme';
 import React from 'react';
 
 import { IntlProvider } from 'react-intl';
-import { HomePage } from '../index';
+import { HomePage, mapDispatchToProps } from '../index';
+import { changeUsername } from '../actions';
+import { loadRepos } from '../../App/actions';
+import { push } from 'react-router-redux';
 import RepoListItem from 'containers/RepoListItem';
 import List from 'components/List';
 import LoadingIndicator from 'components/LoadingIndicator';
@@ -36,6 +39,20 @@ describe('<HomePage />', () => {
       ).toBeGreaterThan(-1);
   });
 
+  it('should render fetch the repos on mount if a username exists', () => {
+    const submitSpy = expect.createSpy();
+    mount(
+      <IntlProvider locale="en">
+        <HomePage
+          username="Not Empty"
+          onChangeUsername={() => {}}
+          onSubmitForm={submitSpy}
+        />
+      </IntlProvider>
+    );
+    expect(submitSpy).toHaveBeenCalled();
+  });
+
   it('should render the repositories if loading was successful', () => {
     const repos = [{
       owner: {
@@ -75,4 +92,61 @@ describe('<HomePage />', () => {
     button.simulate('click');
     expect(openRouteSpy).toHaveBeenCalled();
   });
+
+  describe('mapDispatchToProps', () => {
+    describe('onChangeUsername', () => {
+      it('should be injected', () => {
+        const dispatch = expect.createSpy();
+        const result = mapDispatchToProps(dispatch);
+        expect(result.onChangeUsername).toExist();
+      });
+
+      it('should dispatch changeUsername when called', () => {
+        const dispatch = expect.createSpy();
+        const result = mapDispatchToProps(dispatch);
+        const username = 'mxstbr';
+        result.onChangeUsername({ target: { value: username } });
+        expect(dispatch).toHaveBeenCalledWith(changeUsername(username));
+      });
+    });
+  });
+
+  describe('changeRoute', () => {
+    it('should be injected', () => {
+      const dispatch = expect.createSpy();
+      const result = mapDispatchToProps(dispatch);
+      expect(result.changeRoute).toExist();
+    });
+
+    it('should dispatch push when called', () => {
+      const dispatch = expect.createSpy();
+      const result = mapDispatchToProps(dispatch);
+      const route = '/';
+      result.changeRoute(route);
+      expect(dispatch).toHaveBeenCalledWith(push(route));
+    });
+  });
+
+  describe('onSubmitForm', () => {
+    it('should be injected', () => {
+      const dispatch = expect.createSpy();
+      const result = mapDispatchToProps(dispatch);
+      expect(result.onSubmitForm).toExist();
+    });
+
+    it('should dispatch loadRepos when called', () => {
+      const dispatch = expect.createSpy();
+      const result = mapDispatchToProps(dispatch);
+      result.onSubmitForm();
+      expect(dispatch).toHaveBeenCalledWith(loadRepos());
+    });
+
+    it('should preventDefault if called with event', () => {
+      const preventDefault = expect.createSpy();
+      const result = mapDispatchToProps(() => {});
+      const evt = { preventDefault };
+      result.onSubmitForm(evt);
+      expect(preventDefault).toHaveBeenCalledWith();
+    });
+  });
 });
diff --git a/RbDiffApp/app/containers/LanguageProvider/selectors.js b/RbDiffApp/app/containers/LanguageProvider/selectors.js
index 95b922d..c43816f 100644
--- a/RbDiffApp/app/containers/LanguageProvider/selectors.js
+++ b/RbDiffApp/app/containers/LanguageProvider/selectors.js
@@ -3,7 +3,7 @@ import { createSelector } from 'reselect';
 /**
  * Direct selector to the languageToggle state domain
  */
-const selectLanguage = () => state => state.get('language');
+const selectLanguage = () => (state) => state.get('language');
 
 /**
  * Select the language locale
diff --git a/RbDiffApp/app/containers/LanguageProvider/tests/index.test.js b/RbDiffApp/app/containers/LanguageProvider/tests/index.test.js
index f5078cc..8e73bcd 100644
--- a/RbDiffApp/app/containers/LanguageProvider/tests/index.test.js
+++ b/RbDiffApp/app/containers/LanguageProvider/tests/index.test.js
@@ -7,7 +7,7 @@ import configureStore from '../../../store';
 import React from 'react';
 import { Provider } from 'react-redux';
 import { browserHistory } from 'react-router';
-import { translatedMessages } from '../../../i18n';
+import { translationMessages } from '../../../i18n';
 
 describe('<LanguageProvider />', () => {
   let store;
@@ -25,7 +25,7 @@ describe('<LanguageProvider />', () => {
     });
     const renderedComponent = shallow(
       <Provider store={store}>
-        <LanguageProvider messages={translatedMessages}>
+        <LanguageProvider messages={translationMessages}>
           <FormattedMessage {...messages.someMessage} />
         </LanguageProvider>
       </Provider>
diff --git a/RbDiffApp/app/containers/LanguageProvider/tests/reducer.test.js b/RbDiffApp/app/containers/LanguageProvider/tests/reducer.test.js
index cf0a3b3..693052d 100644
--- a/RbDiffApp/app/containers/LanguageProvider/tests/reducer.test.js
+++ b/RbDiffApp/app/containers/LanguageProvider/tests/reducer.test.js
@@ -1,6 +1,9 @@
 import expect from 'expect';
 import languageProviderReducer from '../reducer';
 import { fromJS } from 'immutable';
+import {
+  CHANGE_LOCALE,
+} from '../constants';
 
 describe('languageProviderReducer', () => {
   it('returns the initial state', () => {
@@ -8,4 +11,10 @@ describe('languageProviderReducer', () => {
       locale: 'en',
     }));
   });
+
+  it('changes the locale', () => {
+    expect(languageProviderReducer(undefined, { type: CHANGE_LOCALE, locale: 'de' }).toJS()).toEqual({
+      locale: 'de',
+    });
+  });
 });
diff --git a/RbDiffApp/app/containers/LocaleToggle/index.js b/RbDiffApp/app/containers/LocaleToggle/index.js
index 02b4605..37241af 100644
--- a/RbDiffApp/app/containers/LocaleToggle/index.js
+++ b/RbDiffApp/app/containers/LocaleToggle/index.js
@@ -33,7 +33,7 @@ const mapStateToProps = createSelector(
   (locale) => ({ locale })
 );
 
-function mapDispatchToProps(dispatch) {
+export function mapDispatchToProps(dispatch) {
   return {
     onLocaleToggle: (evt) => dispatch(changeLocale(evt.target.value)),
     dispatch,
diff --git a/RbDiffApp/app/containers/LocaleToggle/tests/index.test.js b/RbDiffApp/app/containers/LocaleToggle/tests/index.test.js
index 4b70414..fdc76f0 100644
--- a/RbDiffApp/app/containers/LocaleToggle/tests/index.test.js
+++ b/RbDiffApp/app/containers/LocaleToggle/tests/index.test.js
@@ -1,4 +1,5 @@
-import LocaleToggle from '../index';
+import LocaleToggle, { mapDispatchToProps } from '../index';
+import { changeLocale } from '../../LanguageProvider/actions';
 import LanguageProvider from '../../LanguageProvider';
 
 import expect from 'expect';
@@ -37,4 +38,23 @@ describe('<LocaleToggle />', () => {
     );
     expect(renderedComponent.contains(<option value="en">en</option>)).toEqual(true);
   });
+
+  describe('mapDispatchToProps', () => {
+    describe('onLocaleToggle', () => {
+      it('should be injected', () => {
+        const dispatch = expect.createSpy();
+        const result = mapDispatchToProps(dispatch);
+        expect(result.onLocaleToggle).toExist();
+      });
+
+      it('should dispatch changeLocale when called', () => {
+        const dispatch = expect.createSpy();
+        const result = mapDispatchToProps(dispatch);
+        const locale = 'de';
+        const evt = { target: { value: locale } };
+        result.onLocaleToggle(evt);
+        expect(dispatch).toHaveBeenCalledWith(changeLocale(locale));
+      });
+    });
+  });
 });
diff --git a/RbDiffApp/app/containers/NotFoundPage/index.js b/RbDiffApp/app/containers/NotFoundPage/index.js
index b64d01b..2aa8c0f 100644
--- a/RbDiffApp/app/containers/NotFoundPage/index.js
+++ b/RbDiffApp/app/containers/NotFoundPage/index.js
@@ -21,7 +21,7 @@ export function NotFound(props) {
       </H1>
       <Button
         handleRoute={function redirect() {
-          props.changeRoute('/');
+          props.dispatch(push('/'));
         }}
       >
         <FormattedMessage {...messages.homeButton} />
@@ -31,15 +31,8 @@ export function NotFound(props) {
 }
 
 NotFound.propTypes = {
-  changeRoute: React.PropTypes.func,
+  dispatch: React.PropTypes.func,
 };
 
-// react-redux stuff
-function mapDispatchToProps(dispatch) {
-  return {
-    changeRoute: (url) => dispatch(push(url)),
-  };
-}
-
 // Wrap the component to inject dispatch and state into it
-export default connect(null, mapDispatchToProps)(NotFound);
+export default connect()(NotFound);
diff --git a/RbDiffApp/app/containers/NotFoundPage/tests/index.test.js b/RbDiffApp/app/containers/NotFoundPage/tests/index.test.js
index 7c19f29..fe2e7f2 100644
--- a/RbDiffApp/app/containers/NotFoundPage/tests/index.test.js
+++ b/RbDiffApp/app/containers/NotFoundPage/tests/index.test.js
@@ -3,10 +3,10 @@
  */
 
 import expect from 'expect';
-import { shallow, mount } from 'enzyme';
+import { shallow } from 'enzyme';
 import React from 'react';
 
-import { IntlProvider, FormattedMessage } from 'react-intl';
+import { FormattedMessage } from 'react-intl';
 import { NotFound } from '../index';
 import H1 from 'components/H1';
 import Button from 'components/Button';
@@ -33,21 +33,16 @@ describe('<NotFound />', () => {
     expect(renderedButton.length).toEqual(1);
   });
 
-  it('should link to "/"', () => {
-    const changeRouteSpy = expect.createSpy();
-    const onChangeRoute = (dest) => {
-      if (dest === '/') {
-        changeRouteSpy();
-      }
+  it('should link to "/"', (done) => {
+    const dispatch = (action) => {
+      expect(action.payload.args).toEqual('/');
+      done();
     };
 
-    const renderedComponent = mount(
-      <IntlProvider locale="en">
-        <NotFound changeRoute={onChangeRoute} />
-      </IntlProvider>
+    const renderedComponent = shallow(
+      <NotFound dispatch={dispatch} />
     );
-    const button = renderedComponent.find('button');
-    button.simulate('click');
-    expect(changeRouteSpy).toHaveBeenCalled();
+    const button = renderedComponent.find(Button);
+    button.prop('handleRoute')();
   });
 });
diff --git a/RbDiffApp/app/store.js b/RbDiffApp/app/store.js
index f11f4d3..eec3111 100644
--- a/RbDiffApp/app/store.js
+++ b/RbDiffApp/app/store.js
@@ -9,7 +9,7 @@ import createSagaMiddleware from 'redux-saga';
 import createReducer from './reducers';
 
 const sagaMiddleware = createSagaMiddleware();
-const devtools = window.devToolsExtension || (() => noop => noop);
+const devtools = window.devToolsExtension || (() => (noop) => noop);
 
 export default function configureStore(initialState = {}, history) {
   // Create the store with two middlewares
diff --git a/RbDiffApp/app/utils/asyncInjectors.js b/RbDiffApp/app/utils/asyncInjectors.js
index 94a4bb1..9e9578d 100644
--- a/RbDiffApp/app/utils/asyncInjectors.js
+++ b/RbDiffApp/app/utils/asyncInjectors.js
@@ -33,6 +33,8 @@ export function injectAsyncReducer(store, isValid) {
       '(app/utils...) injectAsyncReducer: Expected `asyncReducer` to be a reducer function'
     );
 
+    if (Reflect.has(store.asyncReducers, name)) return;
+
     store.asyncReducers[name] = asyncReducer; // eslint-disable-line no-param-reassign
     store.replaceReducer(createReducer(store.asyncReducers));
   };
diff --git a/RbDiffApp/appveyor.yml b/RbDiffApp/appveyor.yml
index 8b9a2a8..1787138 100644
--- a/RbDiffApp/appveyor.yml
+++ b/RbDiffApp/appveyor.yml
@@ -11,7 +11,9 @@ environment:
 
   matrix:
     # Node versions to run
-    - nodejs_version: "5.0"
+    - nodejs_version: 6
+    - nodejs_version: 5
+    - nodejs_version: 4
 
 # Fix line endings in Windows. (runs before repo cloning)
 init:
diff --git a/RbDiffApp/docs/css/postcss.md b/RbDiffApp/docs/css/postcss.md
index fe0e2ba..9804338 100644
--- a/RbDiffApp/docs/css/postcss.md
+++ b/RbDiffApp/docs/css/postcss.md
@@ -17,11 +17,26 @@ This boilerplate bundles a few of the most useful PostCSS plugins by default:
 - [`cssnext`](https://github.com/moox/postcss-cssnext): Use tomorrow's CSS
   features today. Transpiles CSS4 features down to CSS3.
 - [`cssnano`](https://github.com/ben-eb/cssnano): Optimizes your CSS file. For a
-  full list of optimizations check [the offical website](http://cssnano.co/optimisations/).
+  full list of optimizations check [the official website](http://cssnano.co/optimisations/).
 
 For more awesome features that the PostCSS ecosystem offers, check out the
 comprehensive, fully-searchable catalog of available plugins at [postcss.parts](http://postcss.parts).
 
+## Adding a new PostCSS plugin
+
+1. Add the plugin to your project (e.g. `npm install --save-dev postcss-super-plugin`).
+2. Modify `internals/webpack/webpack.dev.babel.js`:
+   - Add `const postcssSuperPlugin = require('postcss-super-plugin');`
+     to `// PostCSS plugins` section.
+   - Find `postcss: () => [/* ... current set of plugins ... */]` and add
+     the new plugin to the list: `postcssPlugins: [/* ... */, postcssSuperPlugin()]`.
+3. Restart the server (`CTRL+C`, `npm start`) for the new plugin to become available
+  (webpack does not pick config changes while running).
+
+Before installing a new plugin, make sure that you are not trying to add a feature
+that is already available. It is likely that what you are looking for
+[is supported by `cssnext`](http://cssnext.io/features/), which is a part of the boilerplate.
+
 ---
 
 _Don't like this feature? [Click here](remove.md)_
diff --git a/RbDiffApp/docs/css/sass.md b/RbDiffApp/docs/css/sass.md
index 6b81e48..1d047d8 100644
--- a/RbDiffApp/docs/css/sass.md
+++ b/RbDiffApp/docs/css/sass.md
@@ -29,6 +29,16 @@ If you _really_ still want (or need) to use Sass then...
     cssLoaders: 'style-loader!css-loader?modules&importLoaders=1&sourceMap!postcss-loader!sass-loader',
     ```
 
+    - `internals/webpack/webpack.test.babel.js`
+
+    ```diff
+    loaders: [
+      { test: /\.json$/, loader: 'json-loader' },
+      { test: /\.css$/, loader: 'null-loader' },
++ { test: /\.scss$/, loader: ['style-loader', 'css-loader', 'sass-loader'] },
+     ...
+    ```
+
     Then run `npm i -D sass-loader node-sass`
 
 ...and you should be good to go!
diff --git a/RbDiffApp/docs/general/README.md b/RbDiffApp/docs/general/README.md
index 8f97ceb..2d3dfae 100644
--- a/RbDiffApp/docs/general/README.md
+++ b/RbDiffApp/docs/general/README.md
@@ -49,7 +49,7 @@ you can see, play back and change your action history!
 ## Next generation JavaScript
 
 Use ESNext template strings, object destructuring, arrow functions, JSX syntax
-and more, today. This is possible thanks to Babel with the `es2015`, `stage-0`
+and more, today. This is possible thanks to Babel with the `latest`, `stage-0`
 and `react` presets!
 
 ## Next generation CSS
diff --git a/RbDiffApp/docs/general/faq.md b/RbDiffApp/docs/general/faq.md
index 54b3708..fb01fd7 100644
--- a/RbDiffApp/docs/general/faq.md
+++ b/RbDiffApp/docs/general/faq.md
@@ -80,7 +80,7 @@ in between, somewhere up the tree will be route. (maybe only "/", but still a ro
 
 ### Where do I put the reducer?
 
-While you can include the reducer statically in `reducers.js`, we don't recommend this as you loose
+While you can include the reducer statically in `reducers.js`, we don't recommend this as you lose
 the benefits of code splitting. Instead, add it as a _composed reducer_. This means that you
 pass actions onward to a second reducer from a lower-level route reducer like so:
 
diff --git a/RbDiffApp/docs/js/redux-saga.md b/RbDiffApp/docs/js/redux-saga.md
index ed172da..f449fe6 100644
--- a/RbDiffApp/docs/js/redux-saga.md
+++ b/RbDiffApp/docs/js/redux-saga.md
@@ -8,7 +8,7 @@ beautifully for data fetching, concurrent computations and a lot more.
   then it should have an effect on widget2. Instead of coupling the 2 widgets
   together (ie widget1 dispatch an action that targets widget2), widget1 only
   dispatch that its button was clicked. Then the saga listen for this button
-  click and then update widget2 by dispaching a new event that widget2 is aware of.
+  click and then update widget2 by dispatching a new event that widget2 is aware of.
 >
 > This adds a level of indirection that is unnecessary for simple apps, but make
   it more easy to scale complex applications. You can now publish widget1 and
diff --git a/RbDiffApp/docs/js/reselect.md b/RbDiffApp/docs/js/reselect.md
index ba83df1..db7f705 100644
--- a/RbDiffApp/docs/js/reselect.md
+++ b/RbDiffApp/docs/js/reselect.md
@@ -28,7 +28,7 @@ export {
 ### Complex selectors
 
 If we need to, we can combine simple selectors to build more complex ones which
-get nested state parts with reselects `createSelector` function. We import other
+get nested state parts with reselect's `createSelector` function. We import other
 selectors and pass them to the `createSelector` call:
 
 ```javascript
diff --git a/RbDiffApp/docs/js/routing.md b/RbDiffApp/docs/js/routing.md
index 629a265..8cacfa2 100644
--- a/RbDiffApp/docs/js/routing.md
+++ b/RbDiffApp/docs/js/routing.md
@@ -158,7 +158,7 @@ export function* getXhrPodcast(slug) {
 
 Wait (`take`) for the LOAD_POST constant, which contains the slug payload from the `getPost()` function in actions.js. 
 
-When the action is fired then dispatch the `getXhrPodcast()` function to get the reponse from your api. On success dispatch the `postLoaded()` action (`yield put`) which sends back the reponse and can be added into the reducer state.
+When the action is fired then dispatch the `getXhrPodcast()` function to get the response from your api. On success dispatch the `postLoaded()` action (`yield put`) which sends back the response and can be added into the reducer state.
 
 
 You can read more on [`react-router`'s documentation](https://github.com/reactjs/react-router/blob/master/docs/API.md#props-3).
diff --git a/RbDiffApp/internals/config.js b/RbDiffApp/internals/config.js
index 9004a69..32b6781 100644
--- a/RbDiffApp/internals/config.js
+++ b/RbDiffApp/internals/config.js
@@ -4,7 +4,7 @@ const uniq = require('lodash/uniq');
 
 const ReactBoilerplate = {
   // This refers to the react-boilerplate version this project is based on.
-  version: '3.0.0',
+  version: '3.2.1',
 
   /**
    * The DLL Plugin provides a dramatic speed increase to webpack build and hot module reloading
diff --git a/RbDiffApp/internals/generators/component/index.js b/RbDiffApp/internals/generators/component/index.js
index 2b52271..3c0d80d 100644
--- a/RbDiffApp/internals/generators/component/index.js
+++ b/RbDiffApp/internals/generators/component/index.js
@@ -17,7 +17,7 @@ module.exports = {
     name: 'name',
     message: 'What should it be called?',
     default: 'Button',
-    validate: value => {
+    validate: (value) => {
       if ((/.+/).test(value)) {
         return componentExists(value) ? 'A component or container with this name already exists' : true;
       }
@@ -35,7 +35,7 @@ module.exports = {
     default: true,
     message: 'Do you want i18n messages (i.e. will this component use text)?',
   }],
-  actions: data => {
+  actions: (data) => {
     // Generate index.js and index.test.js
     const actions = [{
       type: 'add',
diff --git a/RbDiffApp/internals/generators/container/index.js b/RbDiffApp/internals/generators/container/index.js
index 44dc4b4..d41c4f3 100644
--- a/RbDiffApp/internals/generators/container/index.js
+++ b/RbDiffApp/internals/generators/container/index.js
@@ -11,7 +11,7 @@ module.exports = {
     name: 'name',
     message: 'What should it be called?',
     default: 'Form',
-    validate: value => {
+    validate: (value) => {
       if ((/.+/).test(value)) {
         return componentExists(value) ? 'A component or container with this name already exists' : true;
       }
@@ -44,7 +44,7 @@ module.exports = {
     default: true,
     message: 'Do you want i18n messages (i.e. will this component use text)?',
   }],
-  actions: data => {
+  actions: (data) => {
     // Generate index.js and index.test.js
     const actions = [{
       type: 'add',
diff --git a/RbDiffApp/internals/generators/container/index.js.hbs b/RbDiffApp/internals/generators/container/index.js.hbs
index 420ae1f..4626d8c 100644
--- a/RbDiffApp/internals/generators/container/index.js.hbs
+++ b/RbDiffApp/internals/generators/container/index.js.hbs
@@ -29,12 +29,12 @@ export class {{ properCase name }} extends React.Component { // eslint-disable-l
       <div>
       {{/if}}
       {{#if wantHeaders}}
-      <Helmet
-        title="{{properCase name}}"
-        meta={{curly true}}[
-          {{curly true}} name: 'description', content: 'Description of {{properCase name}}' {{curly}},
-        ]{{curly}}
-      />
+        <Helmet
+          title="{{properCase name}}"
+          meta={{curly true}}[
+            {{curly true}} name: 'description', content: 'Description of {{properCase name}}' {{curly}},
+          ]{{curly}}
+        />
       {{/if}}
       {{#if wantMessages}}
         <FormattedMessage {...messages.header} />
@@ -57,5 +57,5 @@ function mapDispatchToProps(dispatch) {
 {{#if wantActionsAndReducer}}
 export default connect(mapStateToProps, mapDispatchToProps)({{ properCase name }});
 {{else}}
-export default connect(mapDispatchToProps)({{ properCase name }});
+export default connect(null, mapDispatchToProps)({{ properCase name }});
 {{/if}}
diff --git a/RbDiffApp/internals/generators/container/selectors.js.hbs b/RbDiffApp/internals/generators/container/selectors.js.hbs
index 0b5c138..6bcca8b 100644
--- a/RbDiffApp/internals/generators/container/selectors.js.hbs
+++ b/RbDiffApp/internals/generators/container/selectors.js.hbs
@@ -3,7 +3,7 @@ import { createSelector } from 'reselect';
 /**
  * Direct selector to the {{ camelCase name }} state domain
  */
-const select{{ properCase name }}Domain = () => state => state.get('{{ camelCase name }}');
+const select{{ properCase name }}Domain = () => (state) => state.get('{{ camelCase name }}');
 
 /**
  * Other specific selectors
diff --git a/RbDiffApp/internals/generators/language/index.js b/RbDiffApp/internals/generators/language/index.js
index 83899c6..6922062 100644
--- a/RbDiffApp/internals/generators/language/index.js
+++ b/RbDiffApp/internals/generators/language/index.js
@@ -4,13 +4,13 @@
 const exec = require('child_process').exec;
 
 module.exports = {
-  description: 'Add a langauge',
+  description: 'Add a language',
   prompts: [{
     type: 'input',
     name: 'language',
     message: 'What is the language you want to add i18n support for (e.g. "fr", "de")?',
     default: 'fr',
-    validate: value => {
+    validate: (value) => {
       if ((/.+/).test(value) && value.length === 2) {
         return true;
       }
diff --git a/RbDiffApp/internals/generators/route/index.js b/RbDiffApp/internals/generators/route/index.js
index d3d9ba7..8df9c6c 100644
--- a/RbDiffApp/internals/generators/route/index.js
+++ b/RbDiffApp/internals/generators/route/index.js
@@ -33,7 +33,7 @@ module.exports = {
     type: 'input',
     name: 'component',
     message: 'Which component should the route show?',
-    validate: value => {
+    validate: (value) => {
       if ((/.+/).test(value)) {
         return componentExists(value) ? true : `"${value}" doesn't exist.`;
       }
@@ -45,7 +45,7 @@ module.exports = {
     name: 'path',
     message: 'Enter the path of the route.',
     default: '/about',
-    validate: value => {
+    validate: (value) => {
       if ((/.+/).test(value)) {
         return true;
       }
@@ -56,7 +56,7 @@ module.exports = {
 
   // Add the route to the routes.js file above the error route
   // TODO smarter route adding
-  actions: data => {
+  actions: (data) => {
     const actions = [];
     if (reducerExists(data.component)) {
       data.useSagas = sagasExists(data.component); // eslint-disable-line no-param-reassign
diff --git a/RbDiffApp/internals/scripts/dependencies.js b/RbDiffApp/internals/scripts/dependencies.js
index 0cdb064..21d1dab 100644
--- a/RbDiffApp/internals/scripts/dependencies.js
+++ b/RbDiffApp/internals/scripts/dependencies.js
@@ -28,7 +28,7 @@ mkdir('-p', outputPath)
 echo('Building the Webpack DLL...')
 
 /**
- * Create a manifest so npm install doesnt warn us
+ * Create a manifest so npm install doesn't warn us
  */
 if (!exists(dllManifestPath)) {
   writeFile(
diff --git a/RbDiffApp/internals/scripts/extract-intl.js b/RbDiffApp/internals/scripts/extract-intl.js
index 4468313..901aac3 100644
--- a/RbDiffApp/internals/scripts/extract-intl.js
+++ b/RbDiffApp/internals/scripts/extract-intl.js
@@ -1,7 +1,7 @@
 /* eslint-disable */
 /**
  * This script will extract the internationalization messages from all components
-   and package them in the transalation json files in the translations file.
+   and package them in the translation json files in the translations file.
  */
 const fs = require('fs');
 const nodeGlob = require('glob');
diff --git a/RbDiffApp/internals/templates/app.js b/RbDiffApp/internals/templates/app.js
index 80c5aef..74c2f0f 100644
--- a/RbDiffApp/internals/templates/app.js
+++ b/RbDiffApp/internals/templates/app.js
@@ -18,7 +18,7 @@ import ReactDOM from 'react-dom';
 import { Provider } from 'react-redux';
 import { applyRouterMiddleware, Router, browserHistory } from 'react-router';
 import { syncHistoryWithStore } from 'react-router-redux';
-import useScroll from 'react-router-scroll';
+import { useScroll } from 'react-router-scroll';
 import LanguageProvider from 'containers/LanguageProvider';
 import configureStore from './store';
 
@@ -83,10 +83,16 @@ if (module.hot) {
 
 // Chunked polyfill for browsers without Intl support
 if (!window.Intl) {
-  Promise.all([
-    System.import('intl'),
-    System.import('intl/locale-data/jsonp/en.js'),
-  ]).then(() => render(translationMessages));
+  (new Promise((resolve) => {
+    resolve(System.import('intl'));
+  }))
+    .then(() => Promise.all([
+      System.import('intl/locale-data/jsonp/de.js'),
+    ]))
+    .then(() => render(translationMessages))
+    .catch((err) => {
+      throw err;
+    });
 } else {
   render(translationMessages);
 }
diff --git a/RbDiffApp/internals/templates/appContainer.js b/RbDiffApp/internals/templates/appContainer.js
index f6a57ce..4273ca1 100644
--- a/RbDiffApp/internals/templates/appContainer.js
+++ b/RbDiffApp/internals/templates/appContainer.js
@@ -7,7 +7,7 @@
  *
  * NOTE: while this component should technically be a stateless functional
  * component (SFC), hot reloading does not currently support SFCs. If hot
- * reloading is not a neccessity for you then you can refactor it and remove
+ * reloading is not a necessity for you then you can refactor it and remove
  * the linting exception.
  */
 
diff --git a/RbDiffApp/internals/templates/asyncInjectors.js b/RbDiffApp/internals/templates/asyncInjectors.js
index 1ff068d..ca2fe2f 100644
--- a/RbDiffApp/internals/templates/asyncInjectors.js
+++ b/RbDiffApp/internals/templates/asyncInjectors.js
@@ -33,6 +33,8 @@ export function injectAsyncReducer(store, isValid) {
       '(app/utils...) injectAsyncReducer: Expected `asyncReducer` to be a reducer function'
     );
 
+    if (Reflect.has(store.asyncReducers, name)) return;
+
     store.asyncReducers[name] = asyncReducer; // eslint-disable-line no-param-reassign
     store.replaceReducer(createReducer(store.asyncReducers));
   };
diff --git a/RbDiffApp/internals/templates/homePage/homePage.js b/RbDiffApp/internals/templates/homePage/homePage.js
index c47ae02..4c33032 100644
--- a/RbDiffApp/internals/templates/homePage/homePage.js
+++ b/RbDiffApp/internals/templates/homePage/homePage.js
@@ -5,7 +5,7 @@
  *
  * NOTE: while this component should technically be a stateless functional
  * component (SFC), hot reloading does not currently support SFCs. If hot
- * reloading is not a neccessity for you then you can refactor it and remove
+ * reloading is not a necessity for you then you can refactor it and remove
  * the linting exception.
  */
 
diff --git a/RbDiffApp/internals/templates/languageProvider/selectors.js b/RbDiffApp/internals/templates/languageProvider/selectors.js
index 95b922d..c43816f 100644
--- a/RbDiffApp/internals/templates/languageProvider/selectors.js
+++ b/RbDiffApp/internals/templates/languageProvider/selectors.js
@@ -3,7 +3,7 @@ import { createSelector } from 'reselect';
 /**
  * Direct selector to the languageToggle state domain
  */
-const selectLanguage = () => state => state.get('language');
+const selectLanguage = () => (state) => state.get('language');
 
 /**
  * Select the language locale
diff --git a/RbDiffApp/internals/templates/notFoundPage/notFoundPage.js b/RbDiffApp/internals/templates/notFoundPage/notFoundPage.js
index 49f4155..f5305d9 100644
--- a/RbDiffApp/internals/templates/notFoundPage/notFoundPage.js
+++ b/RbDiffApp/internals/templates/notFoundPage/notFoundPage.js
@@ -5,7 +5,7 @@
  *
  * NOTE: while this component should technically be a stateless functional
  * component (SFC), hot reloading does not currently support SFCs. If hot
- * reloading is not a neccessity for you then you can refactor it and remove
+ * reloading is not a necessity for you then you can refactor it and remove
  * the linting exception.
  */
 
diff --git a/RbDiffApp/internals/templates/store.js b/RbDiffApp/internals/templates/store.js
index 6c8edbb..d7a1056 100644
--- a/RbDiffApp/internals/templates/store.js
+++ b/RbDiffApp/internals/templates/store.js
@@ -9,7 +9,7 @@ import createSagaMiddleware from 'redux-saga';
 import createReducer from './reducers';
 
 const sagaMiddleware = createSagaMiddleware();
-const devtools = window.devToolsExtension || (() => noop => noop);
+const devtools = window.devToolsExtension || (() => (noop) => noop);
 
 export default function configureStore(initialState = {}, history) {
   // Create the store with two middlewares
diff --git a/RbDiffApp/internals/testing/test-bundler.js b/RbDiffApp/internals/testing/test-bundler.js
index 5d932e9..ef8bb10 100644
--- a/RbDiffApp/internals/testing/test-bundler.js
+++ b/RbDiffApp/internals/testing/test-bundler.js
@@ -8,6 +8,6 @@ import chaiEnzyme from 'chai-enzyme';
 chai.use(chaiEnzyme());
 
 // Include all .js files under `app`, except app.js, reducers.js, and routes.js.
-// This is for isparta code coverage
+// This is for code coverage
 const context = require.context('../../app', true, /^^((?!(app|reducers|routes)).)*\.js$/);
 context.keys().forEach(context);
diff --git a/RbDiffApp/internals/webpack/webpack.base.babel.js b/RbDiffApp/internals/webpack/webpack.base.babel.js
index 5aadf57..67279e6 100644
--- a/RbDiffApp/internals/webpack/webpack.base.babel.js
+++ b/RbDiffApp/internals/webpack/webpack.base.babel.js
@@ -5,6 +5,11 @@
 const path = require('path');
 const webpack = require('webpack');
 
+// PostCSS plugins
+const cssnext = require('postcss-cssnext');
+const postcssFocus = require('postcss-focus');
+const postcssReporter = require('postcss-reporter');
+
 module.exports = (options) => ({
   entry: options.entry,
   output: Object.assign({ // Compile into js/build.js
@@ -66,7 +71,15 @@ module.exports = (options) => ({
       },
     }),
   ]),
-  postcss: () => options.postcssPlugins,
+  postcss: () => [
+    postcssFocus(), // Add a :focus to every :hover
+    cssnext({ // Allow future CSS features to be used, also auto-prefixes the CSS...
+      browsers: ['last 2 versions', 'IE > 10'], // ...based on this browser list
+    }),
+    postcssReporter({ // Posts messages from plugins to the terminal
+      clearMessages: true,
+    }),
+  ],
   resolve: {
     modules: ['app', 'node_modules'],
     extensions: [
diff --git a/RbDiffApp/internals/webpack/webpack.dev.babel.js b/RbDiffApp/internals/webpack/webpack.dev.babel.js
index b712284..e5bead6 100644
--- a/RbDiffApp/internals/webpack/webpack.dev.babel.js
+++ b/RbDiffApp/internals/webpack/webpack.dev.babel.js
@@ -11,11 +11,6 @@ const cheerio = require('cheerio');
 const pkg = require(path.resolve(process.cwd(), 'package.json'));
 const dllPlugin = pkg.dllPlugin;
 
-// PostCSS plugins
-const cssnext = require('postcss-cssnext');
-const postcssFocus = require('postcss-focus');
-const postcssReporter = require('postcss-reporter');
-
 const plugins = [
   new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
   new webpack.NoErrorsPlugin(),
@@ -45,17 +40,6 @@ module.exports = require('./webpack.base.babel')({
   // Load the CSS in a style tag in development
   cssLoaders: 'style-loader!css-loader?localIdentName=[local]__[path][name]__[hash:base64:5]&modules&importLoaders=1&sourceMap!postcss-loader',
 
-  // Process the CSS with PostCSS
-  postcssPlugins: [
-    postcssFocus(), // Add a :focus to every :hover
-    cssnext({ // Allow future CSS features to be used, also auto-prefixes the CSS...
-      browsers: ['last 2 versions', 'IE > 10'], // ...based on this browser list
-    }),
-    postcssReporter({ // Posts messages from plugins to the terminal
-      clearMessages: true,
-    }),
-  ],
-
   // Tell babel that we want to hot-reload
   babelQuery: {
     presets: ['react-hmre'],
@@ -150,7 +134,7 @@ function templateContent() {
   const body = doc.find('body');
   const dllNames = !dllPlugin.dlls ? ['reactBoilerplateDeps'] : Object.keys(dllPlugin.dlls);
 
-  dllNames.forEach(dllName => body.append(`<script data-dll='true' src='/${dllName}.dll.js'></script>`));
+  dllNames.forEach((dllName) => body.append(`<script data-dll='true' src='/${dllName}.dll.js'></script>`));
 
   return doc.toString();
 }
diff --git a/RbDiffApp/internals/webpack/webpack.dll.babel.js b/RbDiffApp/internals/webpack/webpack.dll.babel.js
index c2bd0cd..bd53475 100644
--- a/RbDiffApp/internals/webpack/webpack.dll.babel.js
+++ b/RbDiffApp/internals/webpack/webpack.dll.babel.js
@@ -19,7 +19,7 @@ if (!pkg.dllPlugin) { process.exit(0); }
 const dllConfig = defaults(pkg.dllPlugin, dllPlugin.defaults);
 const outputPath = join(process.cwd(), dllConfig.path);
 
-module.exports = {
+module.exports = require('./webpack.base.babel')({
   context: process.cwd(),
   entry: dllConfig.dlls ? dllConfig.dlls : dllPlugin.entry(pkg),
   devtool: 'eval',
@@ -31,4 +31,4 @@ module.exports = {
   plugins: [
     new webpack.DllPlugin({ name: '[name]', path: join(outputPath, '[name].json') }), // eslint-disable-line no-new
   ],
-};
+});
diff --git a/RbDiffApp/internals/webpack/webpack.prod.babel.js b/RbDiffApp/internals/webpack/webpack.prod.babel.js
index d369390..1c990b1 100644
--- a/RbDiffApp/internals/webpack/webpack.prod.babel.js
+++ b/RbDiffApp/internals/webpack/webpack.prod.babel.js
@@ -5,11 +5,6 @@ const HtmlWebpackPlugin = require('html-webpack-plugin');
 const ExtractTextPlugin = require('extract-text-webpack-plugin');
 const OfflinePlugin = require('offline-plugin');
 
-// PostCSS plugins
-const cssnext = require('postcss-cssnext');
-const postcssFocus = require('postcss-focus');
-const postcssReporter = require('postcss-reporter');
-
 module.exports = require('./webpack.base.babel')({
   // In production, we skip all hot-reloading stuff
   entry: [
@@ -22,23 +17,13 @@ module.exports = require('./webpack.base.babel')({
     chunkFilename: '[name].[chunkhash].chunk.js',
   },
 
-  // We use ExtractTextPlugin so we get a seperate CSS file instead
+  // We use ExtractTextPlugin so we get a separate CSS file instead
   // of the CSS being in the JS and injected as a style tag
-  cssLoaders: ExtractTextPlugin.extract(
-    'style-loader',
-    'css-loader?modules&-autoprefixer&importLoaders=1!postcss-loader'
-  ),
+  cssLoaders: ExtractTextPlugin.extract({
+    fallbackLoader: 'style-loader',
+    loader: 'css-loader?modules&-autoprefixer&importLoaders=1!postcss-loader',
+  }),
 
-  // In production, we minify our CSS with cssnano
-  postcssPlugins: [
-    postcssFocus(),
-    cssnext({
-      browsers: ['last 2 versions', 'IE > 10'],
-    }),
-    postcssReporter({
-      clearMessages: true,
-    }),
-  ],
   plugins: [
     new webpack.optimize.CommonsChunkPlugin({
       name: 'vendor',
@@ -79,7 +64,7 @@ module.exports = require('./webpack.base.babel')({
       inject: true,
     }),
 
-    // Extract the CSS into a seperate file
+    // Extract the CSS into a separate file
     new ExtractTextPlugin('[name].[contenthash].css'),
 
     // Put it in the end to capture all the HtmlWebpackPlugin's
diff --git a/RbDiffApp/internals/webpack/webpack.test.babel.js b/RbDiffApp/internals/webpack/webpack.test.babel.js
index 4f4b10d..2a2c948 100644
--- a/RbDiffApp/internals/webpack/webpack.test.babel.js
+++ b/RbDiffApp/internals/webpack/webpack.test.babel.js
@@ -2,7 +2,6 @@
  * TEST WEBPACK CONFIGURATION
  */
 
-const path = require('path');
 const webpack = require('webpack');
 const modules = [
   'app',
@@ -11,11 +10,6 @@ const modules = [
 
 module.exports = {
   devtool: 'inline-source-map',
-  isparta: {
-    babel: {
-      presets: ['es2015', 'react', 'stage-0'],
-    },
-  },
   module: {
     // Some libraries don't like being run through babel.
     // If they gripe, put them here.
@@ -23,12 +17,6 @@ module.exports = {
       /node_modules(\\|\/)sinon/,
       /node_modules(\\|\/)acorn/,
     ],
-    preLoaders: [
-      { test: /\.js$/,
-        loader: 'isparta',
-        include: path.resolve('app/'),
-      },
-    ],
     loaders: [
       { test: /\.json$/, loader: 'json-loader' },
       { test: /\.css$/, loader: 'null-loader' },
diff --git a/RbDiffApp/package.json b/RbDiffApp/package.json
index c6cb4f0..ceb998d 100644
--- a/RbDiffApp/package.json
+++ b/RbDiffApp/package.json
@@ -1,6 +1,6 @@
 {
   "name": "react-boilerplate",
-  "version": "3.1.0",
+  "version": "3.2.1",
   "description": "A highly scalable, offline-first foundation with the best DX and a focus on performance and best practices",
   "repository": {
     "type": "git",
@@ -15,7 +15,7 @@
     "analyze:clean": "rimraf stats.json",
     "preanalyze": "npm run analyze:clean",
     "analyze": "node ./internals/scripts/analyze.js",
-    "extract-intl": "babel-node --presets es2015,stage-0 -- ./internals/scripts/extract-intl.js",
+    "extract-intl": "babel-node --presets latest,stage-0 -- ./internals/scripts/extract-intl.js",
     "npmcheckversion": "node ./internals/scripts/npmcheckversion.js",
     "preinstall": "npm run npmcheckversion",
     "postinstall": "npm run build:dll",
@@ -56,9 +56,11 @@
   "babel": {
     "presets": [
       [
-        "es2015",
+        "latest",
         {
-          "modules": false
+          "es2015": {
+            "modules": false
+          }
         }
       ],
       "react",
@@ -74,6 +76,11 @@
           "transform-react-constant-elements",
           "transform-react-inline-elements"
         ]
+      },
+      "test": {
+        "plugins": [
+          "istanbul"
+        ]
       }
     }
   },
@@ -98,6 +105,10 @@
       }
     },
     "rules": {
+      "arrow-parens": [
+        "error",
+        "always"
+      ],
       "arrow-body-style": [
         2,
         "as-needed"
@@ -131,6 +142,12 @@
       "no-console": 1,
       "no-use-before-define": 0,
       "prefer-template": 2,
+      "class-methods-use-this": 0,
+      "react/forbid-prop-types": 0,
+      "react/jsx-first-prop-new-line": [
+        2,
+        "multiline"
+      ],
       "react/jsx-filename-extension": 0,
       "react/jsx-no-target-blank": 0,
       "react/require-extension": 0,
@@ -159,6 +176,14 @@
           ]
         }
       ],
+      "property-no-unknown": [
+        true,
+        {
+          "ignoreProperties": [
+            "composes"
+          ]
+        }
+      ],
       "indentation": 2
     }
   },
@@ -182,73 +207,73 @@
   "dependencies": {
     "babel-polyfill": "6.13.0",
     "chalk": "1.1.3",
+    "cross-env": "2.0.1",
     "compression": "1.6.2",
     "express": "4.14.0",
-    "fontfaceobserver": "2.0.1",
-    "history": "3.0.0",
+    "fontfaceobserver": "2.0.4",
     "immutable": "3.8.1",
     "intl": "1.2.4",
     "invariant": "2.2.1",
     "ip": "1.1.3",
     "lodash": "4.15.0",
-    "react": "15.3.0",
-    "react-dom": "15.3.0",
+    "minimist": "1.2.0",
+    "react": "15.3.1",
+    "react-dom": "15.3.1",
     "react-helmet": "3.1.0",
     "react-redux": "4.4.5",
-    "react-intl": "2.1.3",
-    "react-router": "2.6.1",
+    "react-intl": "2.1.5",
+    "react-router": "2.8.1",
     "react-router-redux": "4.0.5",
-    "react-router-scroll": "0.2.1",
-    "redux": "3.5.2",
-    "redux-immutable": "3.0.7",
-    "redux-saga": "0.11.0",
-    "reselect": "2.5.3",
+    "react-router-scroll": "0.3.2",
+    "redux": "3.6.0",
+    "redux-immutable": "3.0.8",
+    "redux-saga": "0.11.1",
+    "reselect": "2.5.4",
     "sanitize.css": "4.1.0",
     "warning": "3.0.0",
     "whatwg-fetch": "1.0.0"
   },
   "devDependencies": {
-    "babel-cli": "6.11.4",
-    "babel-core": "6.13.2",
+    "babel-cli": "6.14.0",
+    "babel-core": "6.14.0",
     "babel-eslint": "6.1.2",
-    "babel-loader": "6.2.4",
-    "babel-plugin-react-intl": "2.1.3",
+    "babel-loader": "6.2.5",
+    "babel-plugin-istanbul": "2.0.1",
+    "babel-plugin-react-intl": "2.2.0",
     "babel-plugin-react-transform": "2.0.2",
     "babel-plugin-transform-react-constant-elements": "6.9.1",
     "babel-plugin-transform-react-inline-elements": "6.8.0",
     "babel-plugin-transform-react-remove-prop-types": "0.2.9",
-    "babel-preset-es2015": "6.13.2",
+    "babel-preset-latest": "6.14.0",
     "babel-preset-react": "6.11.1",
     "babel-preset-react-hmre": "1.1.1",
     "babel-preset-stage-0": "6.5.0",
     "chai": "3.5.0",
-    "chai-enzyme": "0.5.0",
-    "cheerio": "0.20.0",
-    "coveralls": "2.11.12",
-    "cross-env": "2.0.0",
-    "css-loader": "0.23.1",
+    "chai-enzyme": "0.5.1",
+    "cheerio": "0.22.0",
+    "coveralls": "2.11.13",
+    "css-loader": "0.25.0",
     "enzyme": "2.4.1",
-    "eslint": "3.3.0",
-    "eslint-config-airbnb": "10.0.1",
-    "eslint-import-resolver-webpack": "0.5.1",
-    "eslint-plugin-import": "1.12.0",
-    "eslint-plugin-jsx-a11y": "2.1.0",
-    "eslint-plugin-react": "6.0.0",
+    "eslint": "3.5.0",
+    "eslint-config-airbnb": "11.1.0",
+    "eslint-config-airbnb-base": "7.1.0",
+    "eslint-import-resolver-webpack": "0.6.0",
+    "eslint-plugin-import": "1.15.0",
+    "eslint-plugin-jsx-a11y": "2.2.2",
+    "eslint-plugin-react": "6.2.2",
     "eventsource-polyfill": "0.9.6",
     "expect": "1.20.2",
     "expect-jsx": "2.6.0",
     "exports-loader": "0.6.3",
-    "extract-text-webpack-plugin": "1.0.1",
+    "extract-text-webpack-plugin": "2.0.0-beta.4",
     "file-loader": "0.9.0",
-    "html-loader": "0.4.3",
+    "html-loader": "0.4.4",
     "html-webpack-plugin": "2.22.0",
     "image-webpack-loader": "2.0.0",
     "imports-loader": "0.6.5",
-    "isparta": "4.0.0",
-    "isparta-loader": "2.0.0",
     "json-loader": "0.5.4",
-    "karma": "1.2.0",
-    "karma-chrome-launcher": "1.0.1",
+    "karma": "1.3.0",
+    "karma-chrome-launcher": "2.0.0",
     "karma-coverage": "1.1.1",
     "karma-firefox-launcher": "1.0.0",
     "karma-ie-launcher": "1.0.0",
@@ -257,28 +282,27 @@
     "karma-safari-launcher": "1.0.0",
     "karma-sourcemap-loader": "0.3.7",
     "karma-webpack": "1.8.0",
-    "lint-staged": "2.0.3",
-    "minimist": "1.2.0",
+    "lint-staged": "3.0.2",
     "mocha": "3.0.2",
     "ngrok": "2.2.2",
     "null-loader": "0.1.1",
     "offline-plugin": "3.4.2",
     "plop": "1.5.0",
-    "postcss-cssnext": "2.7.0",
+    "postcss-cssnext": "2.8.0",
     "postcss-focus": "1.0.0",
-    "postcss-loader": "0.9.1",
+    "postcss-loader": "0.13.0",
     "postcss-reporter": "1.4.1",
     "pre-commit": "1.1.3",
     "psi": "2.0.4",
     "rimraf": "2.5.4",
-    "shelljs": "0.7.3",
+    "shelljs": "0.7.4",
     "sinon": "2.0.0-pre",
     "style-loader": "0.13.1",
-    "stylelint": "7.1.0",
-    "stylelint-config-standard": "12.0.0",
+    "stylelint": "7.2.0",
+    "stylelint-config-standard": "13.0.0",
     "url-loader": "0.5.7",
-    "webpack": "2.1.0-beta.15",
-    "webpack-dev-middleware": "1.6.1",
+    "webpack": "2.1.0-beta.22",
+    "webpack-dev-middleware": "1.8.0",
     "webpack-hot-middleware": "2.12.2"
   }
 }
diff --git a/RbDiffApp/server/logger.js b/RbDiffApp/server/logger.js
index d2a5bdb..0fe2ec4 100644
--- a/RbDiffApp/server/logger.js
+++ b/RbDiffApp/server/logger.js
@@ -11,7 +11,7 @@ const divider = chalk.gray('\n-----------------------------------');
 const logger = {
 
   // Called whenever there's an error on the server we want to print
-  error: err => {
+  error: (err) => {
     console.error(chalk.red(err));
   },
 
