diff --git a/RbDiffApp/.babelrc b/RbDiffApp/.babelrc
index e5ddb18..3d53440 100644
--- a/RbDiffApp/.babelrc
+++ b/RbDiffApp/.babelrc
@@ -1,18 +1,18 @@
 {
   "stage": 0,
-  "plugins": [
-    "react-transform"
-  ],
-  "extra": {
-    // must be defined and be an array
-    "react-transform": [{
-      "target": "react-transform-webpack-hmr",
-      // if you use React Native, pass "react-native" instead:
-      "imports": ["react"],
-      // this is important for Webpack HMR:
-      "locals": ["module"]
-    }]
-    // note: you can put more transforms into array
-    // this is just one of them!
+  "env": {
+    // only enable react-transform-hmr when process.env.NODE_ENV is not 'production'
+    "development": {
+      "plugins": ["react-transform"],
+      "extra": {
+        "react-transform": {
+          "transforms": [{
+            "transform": "react-transform-hmr",
+            "imports": ["react"],
+            "locals": ["module"]
+          }]
+        }
+      }
+    }
   }
 }
\ No newline at end of file
diff --git a/RbDiffApp/js/actions/AppActions.js b/RbDiffApp/js/actions/AppActions.js
index a9200dc..618d3e8 100644
--- a/RbDiffApp/js/actions/AppActions.js
+++ b/RbDiffApp/js/actions/AppActions.js
@@ -1,9 +1,27 @@
 import { CHANGE_OWNER_NAME, CHANGE_PROJECT_NAME } from '../constants/AppConstants';
 
-export function changeProjectName(name) {
+export function asyncChangeProjectName(name) {
+  return function(dispatch) {
+    // You can do async stuff here!
+    // API fetching, Animations,...
+    // For more information as to how and why you would do this, check https://github.com/gaearon/redux-thunk
+    return dispatch(changeProjectName(name));
+  }
+}
+
+export function asyncChangeOwnerName(name) {
+  return function(dispatch) {
+    // You can do async stuff here!
+    // API fetching, Animations,...
+    // For more information as to how and why you would do this, check https://github.com/gaearon/redux-thunk
+    return dispatch(changeOwnerName(name));
+  }
+}
+
+function changeProjectName(name) {
   return { type: CHANGE_PROJECT_NAME, name };
 }
 
-export function changeOwnerName(name) {
+function changeOwnerName(name) {
   return { type: CHANGE_OWNER_NAME, name };
 }
diff --git a/RbDiffApp/js/app.js b/RbDiffApp/js/app.js
index 2ec1a8f..c4714f4 100644
--- a/RbDiffApp/js/app.js
+++ b/RbDiffApp/js/app.js
@@ -1,4 +1,5 @@
 import 'file?name=[name].[ext]!../serviceworker.js';
+import 'file?name=[name].[ext]!../serviceworker-cache-polyfill.js';
 import 'file?name=[name].[ext]!../manifest.json';
 import 'fontfaceobserver/fontfaceobserver.js';
 
@@ -23,7 +24,9 @@ openSansObserver.check().then(() => {
 });
 
 import React from 'react';
-import { createStore } from 'redux';
+import ReactDOM from 'react-dom';
+import { createStore, applyMiddleware } from 'redux';
+import thunk from 'redux-thunk';
 import { Provider } from 'react-redux';
 import { homeReducer } from './reducers/reducers';
 import { Router, Route } from 'react-router';
@@ -34,16 +37,16 @@ import ReadmePage from './components/ReadmePage.react';
 
 import '../css/main.css';
 
-const store = createStore(homeReducer);
+const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);
 
-React.render(
+const store = createStoreWithMiddleware(homeReducer);
+
+ReactDOM.render(
   <Provider store={store}>
-    {() =>
-      <Router history={createHistory()}>
-        <Route path="/" component={HomePage} />
-        <Route path="/readme" component={ReadmePage} />
-      </Router>
-    }
+    <Router history={createHistory()}>
+      <Route path="/" component={HomePage} />
+      <Route path="/readme" component={ReadmePage} />
+    </Router>
   </Provider>,
   document.getElementById('app')
 );
diff --git a/RbDiffApp/js/components/HomePage.react.js b/RbDiffApp/js/components/HomePage.react.js
index 62048d3..7a95321 100644
--- a/RbDiffApp/js/components/HomePage.react.js
+++ b/RbDiffApp/js/components/HomePage.react.js
@@ -1,21 +1,22 @@
-import { changeProjectName, changeOwnerName } from '../actions/AppActions';
+import { asyncChangeProjectName, asyncChangeOwnerName } from '../actions/AppActions';
 import React, { Component } from 'react';
 import { connect } from 'react-redux';
 import { Link } from 'react-router';
+import Logo from '../../img/logo.png';
 
 class HomePage extends Component {
 	render() {
     const { dispatch, projectName, ownerName } = this.props;
     return (
 			<div className="wrapper">
-        <img className="logo" src={require('../../img/logo.png')} />
+        <img className="logo" src={Logo} />
 				<h1>Hello World!</h1>
         <h2>This is the demo for the <span className="home__text--red">{ projectName }</span> by <a href={'https://twitter.com/' + ownerName} >@{ ownerName }</a></h2>
         <label className="home__label">Change to your project name:
-				  <input className="home__input" type="text" onChange={(evt) => { dispatch(changeProjectName(evt.target.value)); }} defaultValue="React.js Boilerplate" placeholder="React.js Boilerplate" />
+				  <input className="home__input" type="text" onChange={(evt) => { dispatch(asyncChangeProjectName(evt.target.value)); }} defaultValue="React.js Boilerplate" value={projectName} />
         </label>
         <label className="home__label">Change to your name:
-          <input className="home__input" type="text" onChange={(evt) => { dispatch(changeOwnerName(evt.target.value)); }} defaultValue="mxstbr" placeholder="mxstbr" />
+          <input className="home__input" type="text" onChange={(evt) => { dispatch(asyncChangeOwnerName(evt.target.value)); }} defaultValue="mxstbr" value={ownerName} />
         </label>
         <Link className="btn" to="/readme">Setup</Link>
 			</div>
diff --git a/RbDiffApp/js/components/ReadmePage.react.js b/RbDiffApp/js/components/ReadmePage.react.js
index 7c79d64..8efaf3a 100644
--- a/RbDiffApp/js/components/ReadmePage.react.js
+++ b/RbDiffApp/js/components/ReadmePage.react.js
@@ -1,11 +1,12 @@
 import React, { Component} from 'react';
 import { Link } from 'react-router';
+import Logo from '../../img/logo.png';
 
 export default class AboutPage extends Component {
 	render() {
     return (
     		<div className="wrapper">
-    			<img className="logo" src={require('file!../../img/logo.png')} />
+    			<img className="logo" src={Logo} />
 				<h2>Further Setup</h2>
 				<p>Assuming you have already cloned the repo and ran all the commands from the README (otherwise you would not be here), these are the further steps:</p>
 
diff --git a/RbDiffApp/makewebpackconfig.js b/RbDiffApp/makewebpackconfig.js
index f18e523..b83e346 100644
--- a/RbDiffApp/makewebpackconfig.js
+++ b/RbDiffApp/makewebpackconfig.js
@@ -4,7 +4,7 @@ var HtmlWebpackPlugin = require('html-webpack-plugin');
 var AppCachePlugin = require('appcache-webpack-plugin');
 
 module.exports = function(options) {
-  var entry, jsLoaders, plugins;
+  var entry, jsLoaders, plugins, cssLoaders;
 
   // If production is true
   if (options.prod) {
@@ -12,8 +12,7 @@ module.exports = function(options) {
     entry = [
       path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
     ];
-    // Loaders for JS
-    jsLoaders = ['babel'];
+    cssLoaders = ['file-loader?name=[path][name].[ext]', 'postcss-loader'];
     // Plugins
     plugins = [// Plugins for Webpack
       new webpack.optimize.UglifyJsPlugin({ // Optimize the JavaScript...
@@ -49,8 +48,7 @@ module.exports = function(options) {
       "webpack/hot/only-dev-server", // See above
       path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
     ];
-    // Add react-hot loader for js files
-    jsLoaders = ['babel'];
+    cssLoaders = ['style-loader', 'css-loader', 'postcss-loader'];
     // Only plugin is the hot module replacement plugin
     plugins = [
       new webpack.HotModuleReplacementPlugin() // Make hot loading work
@@ -66,11 +64,11 @@ module.exports = function(options) {
     module: {
       loaders: [{
           test: /\.js$/, // Transform all .js files required somewhere within an entry point...
-          loaders: jsLoaders, // ...with the specified loaders...
+          loader: 'babel', // ...with the specified loaders...
           exclude: path.join(__dirname, '/node_modules/') // ...except for the node_modules folder.
         }, {
           test:   /\.css$/, // Transform all .css files required somewhere within an entry point...
-          loader: "style-loader!css-loader!postcss-loader" // ...with PostCSS
+          loaders: cssLoaders // ...with PostCSS
         }, {
           test: /\.jpe?g$|\.gif$|\.png$/i,
           loader: "url-loader?limit=10000"
diff --git a/RbDiffApp/package.json b/RbDiffApp/package.json
index 5ddc7ea..b8b6da0 100644
--- a/RbDiffApp/package.json
+++ b/RbDiffApp/package.json
@@ -1,27 +1,29 @@
 {
   "name": "reactjs-boilerplate",
-  "version": "2.2.0",
+  "version": "2.3.0",
   "description": "Quick setup for new React.js applications featuring Redux, hotâ€“reloading, PostCSS, react-router and Mocha.",
   "dependencies": {
     "fontfaceobserver": "^1.5.1",
-    "history": "^1.9.1",
-    "react": "^0.13.3",
-    "react-redux": "^2.1.2",
-    "react-router": "^1.0.0-rc1",
-    "redux": "^3.0.0"
+    "history": "^1.13.1",
+    "react": "^0.14.2",
+    "react-dom": "^0.14.2",
+    "react-redux": "^4.0.0",
+    "react-router": "^1.0.0",
+    "redux": "^3.0.0",
+    "redux-thunk": "^1.0.0"
   },
   "devDependencies": {
-    "appcache-webpack-plugin": "^0.2.0",
+    "appcache-webpack-plugin": "^1.2.0",
     "autoprefixer": "^6.0.2",
     "babel": "^5.8.23",
     "babel-core": "^5.8.24",
     "babel-eslint": "^4.1.2",
     "babel-loader": "^5.3.2",
     "babel-plugin-react-transform": "^1.0.5",
-    "css-loader": "^0.18.0",
+    "css-loader": "^0.23.0",
     "cssnano": "^3.0.1",
     "eslint": "^1.4.1",
-    "eslint-config-airbnb": "0.0.8",
+    "eslint-config-airbnb": "1.0.0",
     "eslint-plugin-react": "^3.3.2",
     "expect": "^1.10.0",
     "file-loader": "^0.8.4",
@@ -31,11 +33,11 @@
     "object.assign": "^4.0.1",
     "postcss-focus": "^1.0.0",
     "postcss-import": "^7.0.0",
-    "postcss-loader": "^0.6.0",
+    "postcss-loader": "^0.8.0",
     "postcss-reporter": "^1.2.1",
     "postcss-simple-vars": "^1.0.0",
-    "react-transform-webpack-hmr": "^0.1.5",
-    "style-loader": "^0.12.3",
+    "react-transform-hmr": "^1.0.1",
+    "style-loader": "^0.13.0",
     "url-loader": "^0.5.6",
     "webpack": "^1.12.1",
     "webpack-dev-server": "^1.11.0"
@@ -47,7 +49,7 @@
   "scripts": {
     "test": "mocha --compilers js:babel/register --recursive",
     "start": "NODE_ENV=development && node server.js",
-    "build": "rm -rf build && NODE_ENV=production && webpack --config webpack.prod.config.js --progress --colors -p"
+    "build": "npm run test && NODE_ENV=production && webpack --config webpack.prod.config.js --progress --colors -p"
   },
   "author": "Max Stoiber",
   "license": "MIT"
diff --git a/RbDiffApp/serviceworker-cache-polyfill.js b/RbDiffApp/serviceworker-cache-polyfill.js
new file mode 100644
index 0000000..db862e5
--- /dev/null
+++ b/RbDiffApp/serviceworker-cache-polyfill.js
@@ -0,0 +1,72 @@
+/**
+ * Copyright 2015 Google Inc. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+if (!Cache.prototype.addAll) {
+  Cache.prototype.addAll = function addAll(requests) {
+    var cache = this;
+
+    // Since DOMExceptions are not constructable:
+    function NetworkError(message) {
+      this.name = 'NetworkError';
+      this.code = 19;
+      this.message = message;
+    }
+    NetworkError.prototype = Object.create(Error.prototype);
+
+    return Promise.resolve().then(function() {
+      if (arguments.length < 1) throw new TypeError();
+
+      // Simulate sequence<(Request or USVString)> binding:
+      var sequence = [];
+
+      requests = requests.map(function(request) {
+        if (request instanceof Request) {
+          return request;
+        }
+        else {
+          return String(request); // may throw TypeError
+        }
+      });
+
+      return Promise.all(
+        requests.map(function(request) {
+          if (typeof request === 'string') {
+            request = new Request(request);
+          }
+
+          var scheme = new URL(request.url).protocol;
+
+          if (scheme !== 'http:' && scheme !== 'https:') {
+            throw new NetworkError("Invalid scheme");
+          }
+
+          return fetch(request.clone());
+        })
+      );
+    }).then(function(responses) {
+      // TODO: check that requests don't overwrite one another
+      // (don't think this is possible to polyfill due to opaque responses)
+      return Promise.all(
+        responses.map(function(response, i) {
+          return cache.put(requests[i], response);
+        })
+      );
+    }).then(function() {
+      return undefined;
+    });
+  };
+}
\ No newline at end of file
diff --git a/RbDiffApp/serviceworker.js b/RbDiffApp/serviceworker.js
index e9c0f1e..b293662 100644
--- a/RbDiffApp/serviceworker.js
+++ b/RbDiffApp/serviceworker.js
@@ -1,3 +1,5 @@
+importScripts('serviceworker-cache-polyfill.js');
+
 var CACHE_NAME = 'react-boilerplate-cache-v1';
 // The files we want to cache
 var urlsToCache = [
