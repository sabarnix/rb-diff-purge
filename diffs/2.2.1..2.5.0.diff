diff --git a/RbDiffApp/.babelrc b/RbDiffApp/.babelrc
index 3d53440..6d1c539 100644
--- a/RbDiffApp/.babelrc
+++ b/RbDiffApp/.babelrc
@@ -1,18 +1,16 @@
 {
-  "stage": 0,
   "env": {
-    // only enable react-transform-hmr when process.env.NODE_ENV is not 'production'
     "development": {
-      "plugins": ["react-transform"],
-      "extra": {
-        "react-transform": {
+      "plugins": [
+        ["react-transform", {
           "transforms": [{
             "transform": "react-transform-hmr",
             "imports": ["react"],
             "locals": ["module"]
           }]
-        }
-      }
+        }]
+      ]
     }
-  }
-}
\ No newline at end of file
+  },
+  "presets": ["es2015", "react", "stage-2"]
+}
diff --git a/RbDiffApp/.eslintignore b/RbDiffApp/.eslintignore
index f7fe025..74dd05a 100644
--- a/RbDiffApp/.eslintignore
+++ b/RbDiffApp/.eslintignore
@@ -1,11 +1,9 @@
-js/bundle.js
-js/bundle.min.js
+# node_modules are ignored by default
+
+# Ignore build folder
 build
-node_modules
-*.html
-*.md
-*.json
-*.css
-config.js
+
+# Ignore config stuff
 server.js
-*.config.js
\ No newline at end of file
+*config.js
+serviceworker.js
diff --git a/RbDiffApp/.eslintrc b/RbDiffApp/.eslintrc
index 651b556..5d4e3a3 100644
--- a/RbDiffApp/.eslintrc
+++ b/RbDiffApp/.eslintrc
@@ -1,5 +1,10 @@
 {
   	"extends": "./node_modules/eslint-config-airbnb/.eslintrc",
+    "env": {
+      "browser": true,
+      "node": true,
+      "mocha": true
+    },
   	"ecmaFeatures": {
       	"forOf": true,
       	"jsx": true,
@@ -9,4 +14,4 @@
   		"comma-dangle": 0,
   		"react/prop-types": 0
   	}
-}
\ No newline at end of file
+}
diff --git a/RbDiffApp/.gitattributes b/RbDiffApp/.gitattributes
index 4e1be9d..783ceaa 100644
--- a/RbDiffApp/.gitattributes
+++ b/RbDiffApp/.gitattributes
@@ -1,4 +1,4 @@
-# These settings are for any web project
+# From https://github.com/Danimoth/gitattributes/blob/master/Web.gitattributes
 
 # Handle line endings automatically for files detected as text
 # and leave all files detected as binary untouched.
@@ -103,4 +103,4 @@ AUTHORS text
 *.eot binary
 *.woff binary
 *.pyc binary
-*.pdf binary
\ No newline at end of file
+*.pdf binary
diff --git a/RbDiffApp/.htaccess b/RbDiffApp/.htaccess
new file mode 100644
index 0000000..5204b4b
--- /dev/null
+++ b/RbDiffApp/.htaccess
@@ -0,0 +1,44 @@
+<ifModule mod_rewrite.c>
+
+
+  #######################################################################
+  # GENERAL                                                             #
+  #######################################################################
+
+  # Make apache follow sym links to files
+  Options +FollowSymLinks
+  # If somebody opens a folder, hide all files from the resulting folder list
+  IndexIgnore */*
+
+
+  #######################################################################
+  # REWRITING                                                           #
+  #######################################################################
+
+  # Enable rewriting
+  RewriteEngine On
+
+  # If its not HTTPS
+  RewriteCond %{HTTPS} off
+
+  # Comment out the RewriteCond above, and uncomment the RewriteCond below if you're using a load balancer (e.g. CloudFlare) for SSL
+  # RewriteCond %{HTTP:X-Forwarded-Proto} !https
+
+  # Redirect to the same URL with https://, ignoring all further rules if this one is in effect
+  RewriteRule ^(.*) https://%{HTTP_HOST}/$1 [R,L]
+
+  # If we get to here, it means we are on https://
+  
+  # If the file with the specified name in the browser doesn't exist
+  RewriteCond %{REQUEST_FILENAME} !-f
+
+  # and the directory with the specified name in the browser doesn't exist
+  RewriteCond %{REQUEST_FILENAME} !-d
+
+  # and we are not opening the root already (otherwise we get a redirect loop)
+  RewriteCond %{REQUEST_FILENAME} !\/$
+
+  # Rewrite all requests to the root
+  RewriteRule ^(.*) /
+
+</ifModule>
diff --git a/RbDiffApp/README.md b/RbDiffApp/README.md
index 0d9337c..4ebfbc8 100644
--- a/RbDiffApp/README.md
+++ b/RbDiffApp/README.md
@@ -2,11 +2,13 @@
 
 Quick setup for new performance orientated, offline–first React.js applications featuring Redux, hot–reloading, PostCSS, react-router, ServiceWorker, AppCache, FontFaceObserver and Mocha.
 
+[![Dependency Status](https://david-dm.org/mxstbr/react-boilerplate.svg)](https://david-dm.org/mxstbr/react-boilerplate)
+
 -----
 
 ## Features
 
-- Using [**react-hot-loader**](https://github.com/gaearon/react-hot-loader), your changes in the CSS and JS get reflected in the app instantly without refreshing the page. That means that the **current application state persists** even when you change something in the underlying code! For a very good explanation and demo watch Dan Abramov himself [talking about it at react-europe](https://www.youtube.com/watch?v=xsSnOQynTHs).
+- Using [**react-transform-hmr**](https://github.com/gaearon/react-transform-hmr), your changes in the CSS and JS get reflected in the app instantly without refreshing the page. That means that the **current application state persists** even when you change something in the underlying code! For a very good explanation and demo watch Dan Abramov himself [talking about it at react-europe](https://www.youtube.com/watch?v=xsSnOQynTHs).
 
 - [**Redux**](https://github.com/gaearon/redux) is a much better implementation of a flux–like, unidirectional data flow. Redux makes actions composable, reduces the boilerplate code and makes hot–reloading possible in the first place. For a good overview of redux check out the talk linked above or the [official documentation](https://gaearon.github.io/redux/)!
 
@@ -38,85 +40,71 @@ Quick setup for new performance orientated, offline–first React.js application
 
 2. Upload the contents of the `build` folder to your web server.
 
-3. ?????? (You figure this part out)
-
-4. Profit!
-
-## CSS
-
-The CSS modules found in the `css` subfolders all get imported into the `main.css` file, which get inlined and minified into the `compiled.css` file. To add/change the styling, either write the CSS into the appropriate module or make a new one and `@import` it in the `main.css` file at the appropriate place.
-
-### PostCSS Plugins
-
-The boilerplate uses PostCSS, and includes a few plugins by default:
-
-* `postcss-import`: Inlines `@import`ed stylesheets to create one big stylesheet.
+### Server Configuration
 
-* `postcss-simple-vars`: Makes it possible to use `$variables in your CSS.
+#### Apache
 
-* `postcss-focus`: Adds a `:focus` selector to every `:hover`.
+This boilerplate includes a `.htaccess` file that does two things:
 
-* `autoprefixer-core`: Prefixes your CSS automatically, supporting the last two versions of all major browsers and IE 8 and up.
+1. Redirect all traffic to HTTPS because ServiceWorker only works for encrypted traffic
 
-* `cssnano`: Optimizes your CSS file. For a full list of optimizations check [the offical website](http://cssnano.co/optimisations/).
+2. Rewrite all pages (e.g. yourdomain.com/subpage) to the `index.html` to let `react-router` take care of presenting the correct page
 
-* `postcss-reporter`: Makes warnings by the above plugins visible in the console.
-
-For a full, searchable catalog of plugins go to [postcss.parts](http://postcss.parts).
-
-### Folder Structure
-
-The boilerplate comes with a basic folder structure to keep the CSS files organised. This is what the folders are for:
-
-* `base`: Global styling, e.g. setting the box–model for all elements
-
-* `components`: Component specific styling, e.g. buttons, modals,...
-
-* `layout`: Global layouts, e.g. article, homepage,...
+## CSS
 
-* `utils`: Utility files, e.g. variables, mixins, functions,...
+The CSS modules found in the `css` subfolders all get imported into one big file (`main.css`), which gets transpiled with PostCSS.
 
-* `vendor`: External files, e.g. a CSS reset
+See the [`css` folder README](css/README.md) for more information about the PostCSS plugins used and the CSS structure.
 
 ## JS
 
-All files that are `import`ed/`require`d somewhere get compiled into one big file at build time. (`build/bundle.js`) Webpack automatically optimizes your JavaScript with `UglifyJS`, so you do not have to worry about that.
-
-### Folder Structure
+All files that are `import`ed/`require`d somewhere get compiled into one big file at build time. (`build/bundle.js`) Webpack automatically optimizes your JavaScript with `UglifyJS`, so you don't have to worry about that.
 
-The folder structure of the JS files reflects how [Redux](https://github.com/gaearon/redux) works, so if you are not familiar with Redux check out the [official documentation](https://gaearon.github.io/redux/).
-
-* `actions`: Actions get dispatched with this/these utility module(s)
-
-* `components`: The main JS folder. All your React components should be in this folder, for big projects they might be grouped into seperate subfolders. E.g. a navigation component `Nav.react.js`
-
-* `constants`: Action constants need to be defined in this/these utility module(s)
-
-* `reducers`: Reducers manage the state of an app, basically a simplified implementation of Stores in Flux. For an introduction to reducers, watch [this talk](https://www.youtube.com/watch?v=xsSnOQynTHs) by @gaearon.
+See the [`js` folder README](js/README.md) for more information about the JS structure.
 
 ## Testing
 
 Unit tests live in the `test` directory, and are run with `npm test`. There are two files in there already, testing that the current AppActions and Reducers are working correctly. Should you be stuck and have no idea what is going on check out the official [Mocha documentation](http://mochajs.org)!
 
+## Files in the root folder
+
+For a full explanation of all files in the root folder, see [`docs/FILES.md`](docs/FILE-APPENDIX.md).
+
 ## Opinionated features
 
 ### Web Fonts
 
 If you simply use web fonts in your project, the page will stay blank until these fonts are downloaded. That means a lot of waiting time in which users could already read the content.
 
-[FontFaceObserver](https://github.com/bramstein/fontfaceobserver) adds a `js-<font-name>-loaded` class to the `body` when the fonts have loaded. You should specify an initial `font-family` with save fonts, and a `.js-<font-name>-loaded` `font-family` which includes your web font.
+[FontFaceObserver](https://github.com/bramstein/fontfaceobserver) adds a `js-<font-name>-loaded` class to the `body` when the fonts have loaded. You should specify an initial `font-family` with save fonts on the `body`, and a `.js-<font-name>-loaded` `font-family` which includes your web font. See [app.js](js/app.js#L17-L25) and [base.css](css/base/_base.css#L26-L32).
 
 #### Adding a new font
 
-1. Add the `@font-face` declaration to `base/_fonts.css`.
+1. Either add the `@font-face` declaration to `base/_fonts.css` or add a `<link>` tag to the [`index.html`](index.html). (Don't forget to remove the `<link>` for Open Sans from the [`index.html`](index.html))
 
 2. In `base/_base.css`, specify your initial `font-family` in the `body` tag with only save fonts. In the `body.js-<font-name>-loaded` tag, specify your `font-family` stack with your web font.
 
 3. In `js/app.js` add a `<font-name>Observer` for your font.
 
+#### Removing performant web font loading
+
+**Careful** about removing this, as perceived performance might be highly impacted.
+
+To remove `FontFaceObserver`, don't import it in [`app.js`](js/app.js) and remove it from the [`package.json`](package.json).
+
 ### Offline access
 
-Using a `ServiceWorker` and the `App Cache`, your application is cached for offline usage. TO cache a file, add it to `cache` variable of the `AppCachePlugin` in `webpack.build.config.js` and to the `urlsToCache` variable in the `serviceworker.js` file.
+Using a `ServiceWorker` and the `Application Cache`, your application is cached for offline usage.
+
+#### Cache a new file
+
+To cache a file, add it to the `urlsToCache` variable in the [`serviceworker.js`](serviceworker.js) file.
+
+#### Removing offline access
+
+**Careful** about removing this, as there is no real downside to having your application available when the users network connection isn't perfect.
+
+To remove offline capability, delete [`serviceworker.js`](serviceworker.js), remove the import in [`app.js`](js/app.js), remove `AppCachePlugin` in [`makewebpackconfig.js`](makewebpackconfig.js) and remove the `manifest` attribute of the `<html>` tag in [`index.html`](index.html).
 
 ### Add To Homescreen
 
@@ -124,6 +112,10 @@ On Chrome for Android (soon hopefully more browsers), users can add a webpage to
 
 The name and icon to be displayed are set in the `manifest.json` file. Change them to your project name and icon, and try it!
 
+#### Removing add to homescreen functionality
+
+Delete [`manifest.json`](manifest.json) and remove the `<link rel="manifest" href="manifest.json">` tag from the [`index.html`](index.html).
+
 ## Gotchas
 
 These are some things to be aware of when using this boilerplate.
@@ -150,4 +142,4 @@ Then webpack will correctly transfer the image to the build folder.
 
 ## License
 
-This project is licensed under the MIT license, Copyright (c) 2015 Maximilian Stoiber. For more information see `LICENSE.md`.
\ No newline at end of file
+This project is licensed under the MIT license, Copyright (c) 2015 Maximilian Stoiber. For more information see `LICENSE.md`.
diff --git a/RbDiffApp/css/README.md b/RbDiffApp/css/README.md
new file mode 100644
index 0000000..2702cbe
--- /dev/null
+++ b/RbDiffApp/css/README.md
@@ -0,0 +1,37 @@
+# `css`
+
+All `.css` files in one of the five subfolders get compiled into one big file. You can write in existing files and add new ones and they'll get imported automatically.
+
+## PostCSS Plugins
+
+The boilerplate uses PostCSS, and includes a few plugins by default:
+
+* `postcss-import`: Inlines `@import`ed stylesheets to create one big stylesheet.
+
+* `postcss-simple-vars`: Makes it possible to use `$variables in your CSS.
+
+* `postcss-focus`: Adds a `:focus` selector to every `:hover`.
+
+* `autoprefixer-core`: Prefixes your CSS automatically, supporting the last two versions of all major browsers and IE 8 and up.
+
+* `cssnano`: Optimizes your CSS file. For a full list of optimizations check [the offical website](http://cssnano.co/optimisations/).
+
+* `postcss-reporter`: Makes warnings by the above plugins visible in the console.
+
+For a full, searchable catalog of plugins go to [postcss.parts](http://postcss.parts).
+
+## Folder structure
+
+The boilerplate comes with a basic folder structure to keep the CSS files organised. This is what the folders are for:
+
+* `base`: Global styling, e.g. setting the box–model for all elements
+
+* `components`: Component specific styling, e.g. buttons, modals,...
+
+* `layout`: Global layouts, e.g. article, homepage,...
+
+* `utils`: Utility files, e.g. variables, mixins, functions,...
+
+* `vendor`: External files, e.g. a CSS reset
+
+* `main.css`: All CSS files from the above directories are `@import`ed into this file and inlined with `postcss-import`.
diff --git a/RbDiffApp/css/base/_fonts.css b/RbDiffApp/css/base/_fonts.css
index 2cbc83b..39f7926 100644
--- a/RbDiffApp/css/base/_fonts.css
+++ b/RbDiffApp/css/base/_fonts.css
@@ -1,29 +1 @@
 /* This file contains all @font-face declarations, if any. */
-
-/*
- * Open Sans
- */
-/* BEGIN Regular */
-@font-face {
-  font-family: 'Open Sans';
-  src: url("./fonts/Regular/OpenSans-Regular.eot?v=1.1.0");
-  src: url("./fonts/Regular/OpenSans-Regular.eot?#iefix&v=1.1.0") format("embedded-opentype"), url("./fonts/Regular/OpenSans-Regular.woff2?v=1.1.0") format("woff2"), url("./fonts/Regular/OpenSans-Regular.woff?v=1.1.0") format("woff"), url("./fonts/Regular/OpenSans-Regular.ttf?v=1.1.0") format("truetype"), url("./fonts/Regular/OpenSans-Regular.svg?v=1.1.0#Regular") format("svg");
-  font-weight: normal;
-  font-style: normal; }
-/* END Regular */
-/* BEGIN Italic */
-@font-face {
-  font-family: 'Open Sans';
-  src: url("./fonts/Italic/OpenSans-Italic.eot?v=1.1.0");
-  src: url("./fonts/Italic/OpenSans-Italic.eot?#iefix&v=1.1.0") format("embedded-opentype"), url("./fonts/Italic/OpenSans-Italic.woff2?v=1.1.0") format("woff2"), url("./fonts/Italic/OpenSans-Italic.woff?v=1.1.0") format("woff"), url("./fonts/Italic/OpenSans-Italic.ttf?v=1.1.0") format("truetype"), url("./fonts/Italic/OpenSans-Italic.svg?v=1.1.0#Italic") format("svg");
-  font-weight: normal;
-  font-style: italic; }
-/* END Italic */
-/* BEGIN Bold */
-@font-face {
-  font-family: 'Open Sans';
-  src: url("./fonts/Bold/OpenSans-Bold.eot?v=1.1.0");
-  src: url("./fonts/Bold/OpenSans-Bold.eot?#iefix&v=1.1.0") format("embedded-opentype"), url("./fonts/Bold/OpenSans-Bold.woff2?v=1.1.0") format("woff2"), url("./fonts/Bold/OpenSans-Bold.woff?v=1.1.0") format("woff"), url("./fonts/Bold/OpenSans-Bold.ttf?v=1.1.0") format("truetype"), url("./fonts/Bold/OpenSans-Bold.svg?v=1.1.0#Bold") format("svg");
-  font-weight: bold;
-  font-style: normal; }
-/* END Bold */
\ No newline at end of file
diff --git a/RbDiffApp/css/base/_typography.css b/RbDiffApp/css/base/_typography.css
index 3308593..735376f 100644
--- a/RbDiffApp/css/base/_typography.css
+++ b/RbDiffApp/css/base/_typography.css
@@ -1,7 +1,3 @@
 /**
  * Basic typography style for copy text
  */
-body {
-  color: $text-color;
-  font: normal 125% / 1.4 $text-font-stack;
-}
diff --git a/RbDiffApp/css/main.css b/RbDiffApp/css/main.css
index 59f30d0..338c875 100644
--- a/RbDiffApp/css/main.css
+++ b/RbDiffApp/css/main.css
@@ -1,21 +1,18 @@
-/* Do not write any CSS in here, add it to the appropriate module or make a new one and import it here */
+/* Do not write any CSS in here, add it to the appropriate module or make a new one */
 
 @charset 'UTF-8';
 
 /* 1. Vendors */
-@import 'vendor/_normalize';
+@import 'vendor/*.css';
 
 /* 2. Configuration and helpers */
-@import 'utils/_variables';
-@import 'base/_helpers';
+@import 'utils/*.css';
 
 /* 3. Base stuff */
-@import 'base/_base';
+@import 'base/*.css';
 
 /* 4. Layout-related sections */
-@import 'layout/_header';
-@import 'layout/_footer';
+@import 'layout/*.css';
 
 /* 5. Components */
-@import 'components/_buttons';
-@import 'components/_home';
+@import 'components/*.css';
diff --git a/RbDiffApp/css/base/_helpers.css b/RbDiffApp/css/utils/_helpers.css
similarity index 100%
rename from RbDiffApp/css/base/_helpers.css
rename to RbDiffApp/css/utils/_helpers.css
diff --git a/RbDiffApp/docs/COMMANDS.md b/RbDiffApp/docs/COMMANDS.md
new file mode 100644
index 0000000..0520285
--- /dev/null
+++ b/RbDiffApp/docs/COMMANDS.md
@@ -0,0 +1,25 @@
+# Command Line Commands
+
+## Development
+
+```Shell
+$ npm start
+```
+
+Starts the development server and makes your application accessible at `localhost:3000`. Changes in the application code will be hot-reloaded.
+
+## Building
+
+```Shell
+$ npm run build
+```
+
+Gets your application ready for deployment. Optimizes and minifies all files, and generates a folder called `build`. `build` includes all files you need for your application. Upload the contents of `build` to your web server to see it live!
+
+## Unit testing
+
+```Shell
+$ npm run test
+```
+
+Tests your application with the unit tests specified in the `test` folder.
diff --git a/RbDiffApp/docs/FILES.md b/RbDiffApp/docs/FILES.md
new file mode 100644
index 0000000..cd9c9ff
--- /dev/null
+++ b/RbDiffApp/docs/FILES.md
@@ -0,0 +1,29 @@
+# Files in the root folder
+
+* `.babelrc`: The Babel configuration. Babel is a ES6 to ES5 JavaScript transpiler, which means it's the tool that allows us to use ES6 in our applications.
+
+* `.eslintignore`: Tell `eslint` to ignore certain files that should not be linted. (Analyse your code for potential errors/suspicious usage)
+
+* `.eslintrc`: The `eslint` configuration, which checks that the JavaScript files are written in a standardised way.
+
+* `.gitattributes`: Normalizes how `git`, the version control system this boilerplate uses, handles certain files.
+
+* `.gitignore`: Tells `git` to ignore certain files and folders which don't need to be version controlled, like the build folder.
+
+* `.htaccess`: A default server configuration for a single page applications for the Apache web server. See the [`README`](README.md) for more information.
+
+* `index.html`: The HTML file that your web application uses.
+
+* `makewebpackconfig.js`: Generates the webpack configuration. In development mode, we add hot reloading and don't minify our code. In production mode, we minify everything.
+
+  * `webpack.dev.config.js`: Generates the webpack configuration for development.
+
+  * `webpack.prod.config.js`: Generates the webpack configuration for production.
+
+* `manifest.json`: On Chrome for Android (soon hopefully more browsers), users can add a webpage to the homescreen. This file specifies the name/icon/... that is displayed.
+
+* `package.json`: The `npm` configuration file. When you run `npm install`, this is the list that tells `npm` which packages/libraries to download. Also, `npm start`, `npm run build`,... commands are specified here.
+
+* `server.js`: The development server that runs when `npm start` is entered into the command line.
+
+* `serviceworker.js`: The script that tells the serviceworker how to cache our files for offline usage.
diff --git a/RbDiffApp/docs/README.md b/RbDiffApp/docs/README.md
new file mode 100644
index 0000000..712d8fb
--- /dev/null
+++ b/RbDiffApp/docs/README.md
@@ -0,0 +1,5 @@
+# Documentation
+
+* [`FILES.md`](FILES.md): The files in the root folder and what they're used for.
+
+* [`COMMANDS.md`](COMMANDS.md): The commands you can run in the command line.
diff --git a/RbDiffApp/index.html b/RbDiffApp/index.html
index 7acf97e..808ce72 100644
--- a/RbDiffApp/index.html
+++ b/RbDiffApp/index.html
@@ -11,7 +11,8 @@
 	<body>
 		<!-- The app hooks into this div -->
 		<div id="app"></div>
-		<!-- The JavaScript bundle -->
-		<script src="js/bundle.js"></script>
+		<!-- Open Sans Font -->
+		<link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700" rel="stylesheet">
+		<!-- Due to the way webpack works, a lot of magic happens in this file. HtmlWebpackPlugin automatically includes all assets (e.g. bundle.js, main.css) with the correct HTML tags, which is why they are missing in this HTML file. Check out webpackconfig.js if you want to know more. -->
 	</body>
 </html>
diff --git a/RbDiffApp/js/README.md b/RbDiffApp/js/README.md
new file mode 100644
index 0000000..40cefc2
--- /dev/null
+++ b/RbDiffApp/js/README.md
@@ -0,0 +1,17 @@
+# `js`
+
+## Folder Structure
+
+The folder structure of the JS files reflects how [Redux](https://github.com/gaearon/redux) works, so if you are not familiar with Redux check out the [official documentation](https://gaearon.github.io/redux/).
+
+* `actions`: Actions get dispatched with this/these utility module(s)
+
+* `components`: The main JS folder. All your React components should be in this folder, for big projects they might be grouped into seperate subfolders. E.g. a navigation component `Nav.react.js`
+
+* `components/pages`: Actual pages (routes) users can visit.
+
+* `constants`: Action constants need to be defined in this/these utility module(s)
+
+* `reducers`: Reducers manage the state of an app, basically a simplified implementation of Stores in Flux. For an introduction to reducers, watch [this talk](https://www.youtube.com/watch?v=xsSnOQynTHs) by @gaearon.
+
+* `app.js`: The entry point of the application. Mostly setup and boilerplate code. Routes are configured in the JSX here!
diff --git a/RbDiffApp/js/actions/AppActions.js b/RbDiffApp/js/actions/AppActions.js
index a9200dc..77803f2 100644
--- a/RbDiffApp/js/actions/AppActions.js
+++ b/RbDiffApp/js/actions/AppActions.js
@@ -1,5 +1,52 @@
+/*
+ * Actions change things in your application
+ * Since this boilerplate uses a uni-directional data flow, specifically redux,
+ * we have these actions which are the only way your application interacts with
+ * your appliction state. This guarantees that your state is up to date and nobody
+ * messes it up weirdly somewhere.
+ *
+ * To add a new Action:
+ * 1) Import your constant
+ * 2) Add a function like this:
+ *    export function yourAction(var) {
+ *        return { type: YOUR_ACTION_CONSTANT, var: var }
+ *    }
+ * 3) (optional) Add an async function like this:
+ *    export function asyncYourAction(var) {
+ *        return (dispatch) => {
+ *             // Do async stuff here
+ *             return dispatch(yourAction(var));
+ *        };
+ *    }
+ *
+ *    If you add an async function, remove the export from the function
+ *    created in the second step
+ */
+
+// Disable the no-use-before-define eslint rule for this file
+// It makes more sense to have the asnyc actions before the non-async ones
+/* eslint-disable no-use-before-define */
+
 import { CHANGE_OWNER_NAME, CHANGE_PROJECT_NAME } from '../constants/AppConstants';
 
+export function asyncChangeProjectName(name) {
+  return (dispatch) => {
+    // You can do async stuff here!
+    // API fetching, Animations,...
+    // For more information as to how and why you would do this, check https://github.com/gaearon/redux-thunk
+    return dispatch(changeProjectName(name));
+  };
+}
+
+export function asyncChangeOwnerName(name) {
+  return (dispatch) => {
+    // You can do async stuff here!
+    // API fetching, Animations,...
+    // For more information as to how and why you would do this, check https://github.com/gaearon/redux-thunk
+    return dispatch(changeOwnerName(name));
+  };
+}
+
 export function changeProjectName(name) {
   return { type: CHANGE_PROJECT_NAME, name };
 }
diff --git a/RbDiffApp/js/app.js b/RbDiffApp/js/app.js
index 6f67123..ccb9a6a 100644
--- a/RbDiffApp/js/app.js
+++ b/RbDiffApp/js/app.js
@@ -1,8 +1,18 @@
+/**
+ *
+ * app.js
+ *
+ * This is the entry file for the application, mostly just setup and boilerplate
+ * code. Routes are configured at the end of this file!
+ *
+ */
+
+// Load the ServiceWorker, the Cache polyfill, the manifest.json file and the .htaccess file
 import 'file?name=[name].[ext]!../serviceworker.js';
-import 'file?name=[name].[ext]!../serviceworker-cache-polyfill.js';
 import 'file?name=[name].[ext]!../manifest.json';
-import 'fontfaceobserver/fontfaceobserver.js';
+import 'file?name=[name].[ext]!../.htaccess';
 
+// Check for ServiceWorker support before trying to install it
 if ('serviceWorker' in navigator) {
   navigator.serviceWorker.register('/serviceworker.js').then(() => {
     // Registration was successful
@@ -13,7 +23,17 @@ if ('serviceWorker' in navigator) {
   // No ServiceWorker Support
 }
 
-// Observer loading of Open Sans
+// Import all the third party stuff
+import React from 'react';
+import ReactDOM from 'react-dom';
+import { Provider } from 'react-redux';
+import { Router, Route } from 'react-router';
+import { createStore, applyMiddleware } from 'redux';
+import thunk from 'redux-thunk';
+import FontFaceObserver from 'fontfaceobserver';
+import createHistory from 'history/lib/createBrowserHistory';
+
+// Observer loading of Open Sans (to remove open sans, remove the <link> tag in the index.html file and this observer)
 const openSansObserver = new FontFaceObserver('Open Sans', {});
 
 // When Open Sans is loaded, add the js-open-sans-loaded class to the body
@@ -23,26 +43,39 @@ openSansObserver.check().then(() => {
   document.body.classList.remove('js-open-sans-loaded');
 });
 
-import React from 'react';
-import ReactDOM from 'react-dom';
-import { createStore } from 'redux';
-import { Provider } from 'react-redux';
-import { homeReducer } from './reducers/reducers';
-import { Router, Route } from 'react-router';
-import createHistory from 'history/lib/createBrowserHistory';
-
-import HomePage from './components/HomePage.react';
-import ReadmePage from './components/ReadmePage.react';
+// Import the pages
+import HomePage from './components/pages/HomePage.react';
+import ReadmePage from './components/pages/ReadmePage.react';
+import NotFoundPage from './components/pages/NotFound.react';
+import App from './components/App.react';
 
+// Import the CSS file, which HtmlWebpackPlugin transfers to the build folder
 import '../css/main.css';
 
-const store = createStore(homeReducer);
+// Create the store with the redux-thunk middleware, which allows us
+// to do asynchronous things in the actions
+import rootReducer from './reducers/rootReducer';
+const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);
+const store = createStoreWithMiddleware(rootReducer);
+
+// Make reducers hot reloadable, see http://stackoverflow.com/questions/34243684/make-redux-reducers-and-other-non-components-hot-loadable
+if (module.hot) {
+  module.hot.accept('./reducers/rootReducer', () => {
+    const nextRootReducer = require('./reducers/rootReducer').default;
+    store.replaceReducer(nextRootReducer);
+  });
+}
 
+// Mostly boilerplate, except for the Routes. These are the pages you can go to,
+// which are all wrapped in the App component, which contains the navigation etc
 ReactDOM.render(
   <Provider store={store}>
     <Router history={createHistory()}>
-      <Route path="/" component={HomePage} />
-      <Route path="/readme" component={ReadmePage} />
+      <Route component={App}>
+        <Route path="/" component={HomePage} />
+        <Route path="/readme" component={ReadmePage} />
+        <Route path="*" component={NotFoundPage} />
+      </Route>
     </Router>
   </Provider>,
   document.getElementById('app')
diff --git a/RbDiffApp/js/components/App.react.js b/RbDiffApp/js/components/App.react.js
new file mode 100644
index 0000000..000ed8c
--- /dev/null
+++ b/RbDiffApp/js/components/App.react.js
@@ -0,0 +1,34 @@
+/**
+ *
+ * App.react.js
+ *
+ * This component is the skeleton around the actual pages, and should only
+ * contain code that should be seen on all pages. (e.g. navigation bar)
+ */
+
+import React, { Component } from 'react';
+import { connect } from 'react-redux';
+import Logo from '../../img/logo.png';
+
+class App extends Component {
+  render() {
+    return (
+      <div className="wrapper">
+        <img className="logo" src={Logo} />
+        { this.props.children }
+      </div>
+    );
+  }
+}
+
+// REDUX STUFF
+
+// Which props do we want to inject, given the global state?
+function select(state) {
+  return {
+    data: state
+  };
+}
+
+// Wrap the component to inject dispatch and state into it
+export default connect(select)(App);
diff --git a/RbDiffApp/js/components/HomePage.react.js b/RbDiffApp/js/components/pages/HomePage.react.js
similarity index 55%
rename from RbDiffApp/js/components/HomePage.react.js
rename to RbDiffApp/js/components/pages/HomePage.react.js
index fda5874..58fbbd4 100644
--- a/RbDiffApp/js/components/HomePage.react.js
+++ b/RbDiffApp/js/components/pages/HomePage.react.js
@@ -1,35 +1,39 @@
-import { changeProjectName, changeOwnerName } from '../actions/AppActions';
+/*
+ * HomePage
+ * This is the first thing users see of our App
+ */
+
+import { asyncChangeProjectName, asyncChangeOwnerName } from '../../actions/AppActions';
 import React, { Component } from 'react';
 import { connect } from 'react-redux';
 import { Link } from 'react-router';
-import Logo from '../../img/logo.png';
 
 class HomePage extends Component {
 	render() {
-    const { dispatch, projectName, ownerName } = this.props;
-    return (
-			<div className="wrapper">
-        <img className="logo" src={Logo} />
+		const dispatch = this.props.dispatch;
+		const { projectName, ownerName } = this.props.data;
+		return (
+			<div>
 				<h1>Hello World!</h1>
         <h2>This is the demo for the <span className="home__text--red">{ projectName }</span> by <a href={'https://twitter.com/' + ownerName} >@{ ownerName }</a></h2>
         <label className="home__label">Change to your project name:
-				  <input className="home__input" type="text" onChange={(evt) => { dispatch(changeProjectName(evt.target.value)); }} defaultValue="React.js Boilerplate" placeholder={projectName} />
+					<input className="home__input" type="text" onChange={(evt) => { dispatch(asyncChangeProjectName(evt.target.value)); }} defaultValue="React.js Boilerplate" value={projectName} />
         </label>
         <label className="home__label">Change to your name:
-          <input className="home__input" type="text" onChange={(evt) => { dispatch(changeOwnerName(evt.target.value)); }} defaultValue="mxstbr" placeholder={projectName} />
+          <input className="home__input" type="text" onChange={(evt) => { dispatch(asyncChangeOwnerName(evt.target.value)); }} defaultValue="mxstbr" value={ownerName} />
         </label>
         <Link className="btn" to="/readme">Setup</Link>
 			</div>
 		);
-  }
+	}
 }
 
+// REDUX STUFF
+
 // Which props do we want to inject, given the global state?
-// Note: use https://github.com/faassen/reselect for better performance.
 function select(state) {
   return {
-    ownerName: state.ownerName,
-    projectName: state.projectName
+    data: state
   };
 }
 
diff --git a/RbDiffApp/js/components/pages/NotFound.react.js b/RbDiffApp/js/components/pages/NotFound.react.js
new file mode 100644
index 0000000..ea2c914
--- /dev/null
+++ b/RbDiffApp/js/components/pages/NotFound.react.js
@@ -0,0 +1,15 @@
+import React, { Component } from 'react';
+import { Link } from 'react-router';
+
+class NotFound extends Component {
+  render() {
+    return (
+      <article>
+        <h1>Page not found.</h1>
+        <Link to="/" className="btn">Home</Link>
+      </article>
+    );
+  }
+}
+
+export default NotFound;
diff --git a/RbDiffApp/js/components/ReadmePage.react.js b/RbDiffApp/js/components/pages/ReadmePage.react.js
similarity index 85%
rename from RbDiffApp/js/components/ReadmePage.react.js
rename to RbDiffApp/js/components/pages/ReadmePage.react.js
index 8efaf3a..ea9e88b 100644
--- a/RbDiffApp/js/components/ReadmePage.react.js
+++ b/RbDiffApp/js/components/pages/ReadmePage.react.js
@@ -1,12 +1,16 @@
+/*
+ * ReadmePage
+ *
+ * This is the page users see when they click the "Setup" button on the HomePage
+ */
+
 import React, { Component} from 'react';
 import { Link } from 'react-router';
-import Logo from '../../img/logo.png';
 
 export default class AboutPage extends Component {
 	render() {
-    return (
-    		<div className="wrapper">
-    			<img className="logo" src={Logo} />
+		return (
+			<div>
 				<h2>Further Setup</h2>
 				<p>Assuming you have already cloned the repo and ran all the commands from the README (otherwise you would not be here), these are the further steps:</p>
 
@@ -21,5 +25,5 @@ export default class AboutPage extends Component {
 				<Link className="btn" to="/">Home</Link>
 			</div>
 		);
-  }
+	}
 }
diff --git a/RbDiffApp/js/constants/AppConstants.js b/RbDiffApp/js/constants/AppConstants.js
index ae94da7..4deae2f 100644
--- a/RbDiffApp/js/constants/AppConstants.js
+++ b/RbDiffApp/js/constants/AppConstants.js
@@ -1,2 +1,10 @@
+/*
+ * AppConstants
+ * These are the variables that determine what our central data store (reducer.js)
+ * changes in our state. When you add a new action, you have to add a new constant here
+ *
+ * Follow this format:
+ * export const YOUR_ACTION_CONSTANT = 'YOUR_ACTION_CONSTANT';
+ */
 export const CHANGE_PROJECT_NAME = 'CHANGE_PROJECT_NAME';
 export const CHANGE_OWNER_NAME = 'CHANGE_OWNER_NAME';
diff --git a/RbDiffApp/js/reducers/homeReducer.js b/RbDiffApp/js/reducers/homeReducer.js
new file mode 100644
index 0000000..4252118
--- /dev/null
+++ b/RbDiffApp/js/reducers/homeReducer.js
@@ -0,0 +1,40 @@
+/*
+ * The reducer takes care of our data
+ * Using actions, we can change our application state
+ * To add a new action, add it to the switch statement in the homeReducer function
+ *
+ * Example:
+ * case YOUR_ACTION_CONSTANT:
+ *   return assign({}, state, {
+ *       stateVariable: action.var
+ *   });
+ *
+ * To add a new reducer, add a file like this to the reducers folder, and
+ * add it in the rootReducer.js.
+ */
+
+import { CHANGE_OWNER_NAME, CHANGE_PROJECT_NAME } from '../constants/AppConstants';
+const assign = Object.assign || require('object.assign'); // Polyfill maybe needed for browser support
+
+const initialState = {
+  projectName: 'React.js Boilerplate',
+  ownerName: 'mxstbr'
+};
+
+function homeReducer(state = initialState, action) {
+  Object.freeze(state); // Don't mutate state directly, always use assign()!
+  switch (action.type) {
+    case CHANGE_OWNER_NAME:
+      return assign({}, state, {
+        ownerName: action.name
+      });
+    case CHANGE_PROJECT_NAME:
+      return assign({}, state, {
+        projectName: action.name
+      });
+    default:
+      return state;
+  }
+}
+
+export default homeReducer;
diff --git a/RbDiffApp/js/reducers/reducers.js b/RbDiffApp/js/reducers/reducers.js
deleted file mode 100644
index 5f5764c..0000000
--- a/RbDiffApp/js/reducers/reducers.js
+++ /dev/null
@@ -1,22 +0,0 @@
-import { CHANGE_OWNER_NAME, CHANGE_PROJECT_NAME } from '../constants/AppConstants';
-const assign = Object.assign || require('object.assign');
-
-const initialState = {
-  projectName: 'React.js Boilerplate',
-  ownerName: 'mxstbr'
-};
-
-export function homeReducer(state = initialState, action) {
-  switch (action.type) {
-  case CHANGE_OWNER_NAME:
-    return assign({}, state, {
-      ownerName: action.name
-    });
-  case CHANGE_PROJECT_NAME:
-    return assign({}, state, {
-      projectName: action.name
-    });
-  default:
-    return state;
-  }
-}
diff --git a/RbDiffApp/js/reducers/rootReducer.js b/RbDiffApp/js/reducers/rootReducer.js
new file mode 100644
index 0000000..6ec6b02
--- /dev/null
+++ b/RbDiffApp/js/reducers/rootReducer.js
@@ -0,0 +1,13 @@
+/**
+ * Combine all reducers in this file and export the combined reducers.
+ * If we were to do this in store.js, reducers wouldn't be hot reloadable.
+ */
+
+import homeReducer from './homeReducer';
+
+// Replace line below once you have several reducers with
+// import { combineReducers } from 'redux';
+// const rootReducer = combineReducers({ homeReducer, yourReducer })
+const rootReducer = homeReducer;
+
+export default rootReducer;
diff --git a/RbDiffApp/makewebpackconfig.js b/RbDiffApp/makewebpackconfig.js
index b83e346..671e402 100644
--- a/RbDiffApp/makewebpackconfig.js
+++ b/RbDiffApp/makewebpackconfig.js
@@ -2,6 +2,7 @@ var path = require('path');
 var webpack = require('webpack');
 var HtmlWebpackPlugin = require('html-webpack-plugin');
 var AppCachePlugin = require('appcache-webpack-plugin');
+var ExtractTextPlugin = require("extract-text-webpack-plugin");
 
 module.exports = function(options) {
   var entry, jsLoaders, plugins, cssLoaders;
@@ -12,7 +13,7 @@ module.exports = function(options) {
     entry = [
       path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
     ];
-    cssLoaders = ['file-loader?name=[path][name].[ext]', 'postcss-loader'];
+    cssLoaders = ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader');
     // Plugins
     plugins = [// Plugins for Webpack
       new webpack.optimize.UglifyJsPlugin({ // Optimize the JavaScript...
@@ -22,7 +23,7 @@ module.exports = function(options) {
       }),
       new HtmlWebpackPlugin({
         template: 'index.html', // Move the index.html file...
-        minify: { // Minifying it while it is parsed using the following, self–explanatory options
+        minify: { // Minifying it while it is parsed
           removeComments: true,
           collapseWhitespace: true,
           removeRedundantAttributes: true,
@@ -33,10 +34,14 @@ module.exports = function(options) {
           minifyJS: true,
           minifyCSS: true,
           minifyURLs: true
-        }
+        },
+        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
       }),
-      new AppCachePlugin({
-        cache: ['index.html', 'js/bundle.js', 'serviceworker.js']
+      new ExtractTextPlugin("css/main.css"),
+      new webpack.DefinePlugin({
+        "process.env": {
+          NODE_ENV: JSON.stringify("production")
+        }
       })
     ];
 
@@ -48,13 +53,21 @@ module.exports = function(options) {
       "webpack/hot/only-dev-server", // See above
       path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
     ];
-    cssLoaders = ['style-loader', 'css-loader', 'postcss-loader'];
+    cssLoaders = 'style-loader!css-loader!postcss-loader';
     // Only plugin is the hot module replacement plugin
     plugins = [
-      new webpack.HotModuleReplacementPlugin() // Make hot loading work
+      new webpack.HotModuleReplacementPlugin(), // Make hot loading work
+      new HtmlWebpackPlugin({
+        template: 'index.html', // Move the index.html file
+        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
+      })
     ]
   }
 
+  plugins.push(new AppCachePlugin({ // AppCache should be in both prod and dev env
+    exclude: ['.htaccess'] // No need to cache that. See https://support.hostgator.com/articles/403-forbidden-or-no-permission-to-access
+  }));
+
   return {
     entry: entry,
     output: { // Compile into js/build.js
@@ -68,7 +81,7 @@ module.exports = function(options) {
           exclude: path.join(__dirname, '/node_modules/') // ...except for the node_modules folder.
         }, {
           test:   /\.css$/, // Transform all .css files required somewhere within an entry point...
-          loaders: cssLoaders // ...with PostCSS
+          loader: cssLoaders // ...with PostCSS
         }, {
           test: /\.jpe?g$|\.gif$|\.png$/i,
           loader: "url-loader?limit=10000"
@@ -79,6 +92,7 @@ module.exports = function(options) {
     postcss: function() {
       return [
         require('postcss-import')({ // Import all the css files...
+          glob: true,
           onImport: function (files) {
               files.forEach(this.addDependency); // ...and add dependecies from the main.css files to the other css files...
           }.bind(this) // ...so they get hot–reloaded when something changes...
@@ -97,4 +111,4 @@ module.exports = function(options) {
     stats: false, // Don't show stats in the console
     progress: true
   }
-}
\ No newline at end of file
+}
diff --git a/RbDiffApp/package.json b/RbDiffApp/package.json
index 93ab765..3f4886d 100644
--- a/RbDiffApp/package.json
+++ b/RbDiffApp/package.json
@@ -1,30 +1,35 @@
 {
   "name": "reactjs-boilerplate",
-  "version": "2.2.1",
+  "version": "2.4.0",
   "description": "Quick setup for new React.js applications featuring Redux, hot–reloading, PostCSS, react-router and Mocha.",
   "dependencies": {
     "fontfaceobserver": "^1.5.1",
-    "history": "^1.13.1",
+    "history": "1.13.1",
     "react": "^0.14.2",
     "react-dom": "^0.14.2",
     "react-redux": "^4.0.0",
     "react-router": "^1.0.0",
-    "redux": "^3.0.0"
+    "redux": "^3.0.0",
+    "redux-thunk": "^1.0.0"
   },
   "devDependencies": {
     "appcache-webpack-plugin": "^1.2.0",
     "autoprefixer": "^6.0.2",
-    "babel": "^5.8.23",
-    "babel-core": "^5.8.24",
+    "babel": "^6.0.0",
+    "babel-core": "^6.0.0",
     "babel-eslint": "^4.1.2",
-    "babel-loader": "^5.3.2",
-    "babel-plugin-react-transform": "^1.0.5",
+    "babel-loader": "^6.0.0",
+    "babel-plugin-react-transform": "2.0.0-beta1",
+    "babel-preset-es2015": "^6.0.0",
+    "babel-preset-react": "^6.0.0",
+    "babel-preset-stage-2": "^6.0.0",
     "css-loader": "^0.23.0",
     "cssnano": "^3.0.1",
     "eslint": "^1.4.1",
     "eslint-config-airbnb": "1.0.0",
     "eslint-plugin-react": "^3.3.2",
     "expect": "^1.10.0",
+    "extract-text-webpack-plugin": "0.9.1",
     "file-loader": "^0.8.4",
     "html-webpack-plugin": "^1.6.1",
     "json-loader": "^0.5.2",
@@ -46,9 +51,9 @@
     "url": "git://github.com/mxstbr/react-boilerplate.git"
   },
   "scripts": {
-    "test": "mocha --compilers js:babel/register --recursive",
-    "start": "NODE_ENV=development && node server.js",
-    "build": "npm run test && NODE_ENV=production && webpack --config webpack.prod.config.js --progress --colors -p"
+    "test": "mocha --compilers js:babel-core/register --recursive",
+    "start": "NODE_ENV=development node server.js",
+    "build": "npm run test && NODE_ENV=production webpack --config webpack.prod.config.js --progress --colors -p"
   },
   "author": "Max Stoiber",
   "license": "MIT"
diff --git a/RbDiffApp/server.js b/RbDiffApp/server.js
index 50eb30f..e3e8f6f 100644
--- a/RbDiffApp/server.js
+++ b/RbDiffApp/server.js
@@ -4,6 +4,8 @@ var webpack = require('webpack');
 var WebpackDevServer = require('webpack-dev-server');
 var config = require('./webpack.dev.config');
 
+console.log('Starting server...\n');
+
 new WebpackDevServer(webpack(config), { // Start a server
   publicPath: config.output.publicPath,
   hot: true, // With hot reloading
@@ -13,7 +15,8 @@ new WebpackDevServer(webpack(config), { // Start a server
 }).listen(3000, 'localhost', function (err, result) {
   if (err) {
     console.log(err);
+  } else {
+    console.log('Server started');
+    console.log('Listening at localhost:3000');
   }
-
-  console.log('Listening at localhost:3000');
-});
\ No newline at end of file
+});
diff --git a/RbDiffApp/serviceworker-cache-polyfill.js b/RbDiffApp/serviceworker-cache-polyfill.js
deleted file mode 100644
index db862e5..0000000
--- a/RbDiffApp/serviceworker-cache-polyfill.js
+++ /dev/null
@@ -1,72 +0,0 @@
-/**
- * Copyright 2015 Google Inc. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-if (!Cache.prototype.addAll) {
-  Cache.prototype.addAll = function addAll(requests) {
-    var cache = this;
-
-    // Since DOMExceptions are not constructable:
-    function NetworkError(message) {
-      this.name = 'NetworkError';
-      this.code = 19;
-      this.message = message;
-    }
-    NetworkError.prototype = Object.create(Error.prototype);
-
-    return Promise.resolve().then(function() {
-      if (arguments.length < 1) throw new TypeError();
-
-      // Simulate sequence<(Request or USVString)> binding:
-      var sequence = [];
-
-      requests = requests.map(function(request) {
-        if (request instanceof Request) {
-          return request;
-        }
-        else {
-          return String(request); // may throw TypeError
-        }
-      });
-
-      return Promise.all(
-        requests.map(function(request) {
-          if (typeof request === 'string') {
-            request = new Request(request);
-          }
-
-          var scheme = new URL(request.url).protocol;
-
-          if (scheme !== 'http:' && scheme !== 'https:') {
-            throw new NetworkError("Invalid scheme");
-          }
-
-          return fetch(request.clone());
-        })
-      );
-    }).then(function(responses) {
-      // TODO: check that requests don't overwrite one another
-      // (don't think this is possible to polyfill due to opaque responses)
-      return Promise.all(
-        responses.map(function(response, i) {
-          return cache.put(requests[i], response);
-        })
-      );
-    }).then(function() {
-      return undefined;
-    });
-  };
-}
\ No newline at end of file
diff --git a/RbDiffApp/serviceworker.js b/RbDiffApp/serviceworker.js
index b293662..43a8b5c 100644
--- a/RbDiffApp/serviceworker.js
+++ b/RbDiffApp/serviceworker.js
@@ -1,9 +1,8 @@
-importScripts('serviceworker-cache-polyfill.js');
-
 var CACHE_NAME = 'react-boilerplate-cache-v1';
 // The files we want to cache
 var urlsToCache = [
   '/',
+  '/css/main.css',
   '/js/bundle.js'
 ];
 
@@ -60,4 +59,4 @@ self.addEventListener('fetch', function(event) {
         );
       })
     );
-});
\ No newline at end of file
+});
diff --git a/RbDiffApp/test/reducers.test.js b/RbDiffApp/test/reducers.test.js
index a3dccc0..058a3e5 100644
--- a/RbDiffApp/test/reducers.test.js
+++ b/RbDiffApp/test/reducers.test.js
@@ -1,5 +1,5 @@
 import expect from 'expect';
-import { homeReducer } from '../js/reducers/reducers';
+import homeReducer from '../js/reducers/homeReducer';
 import * as constants from '../js/constants/AppConstants';
 
 // Test Reducer
