diff --git a/RbDiffApp/.gitattributes b/RbDiffApp/.gitattributes
index 783ceaa..4e1be9d 100644
--- a/RbDiffApp/.gitattributes
+++ b/RbDiffApp/.gitattributes
@@ -1,4 +1,4 @@
-# From https://github.com/Danimoth/gitattributes/blob/master/Web.gitattributes
+# These settings are for any web project
 
 # Handle line endings automatically for files detected as text
 # and leave all files detected as binary untouched.
@@ -103,4 +103,4 @@ AUTHORS text
 *.eot binary
 *.woff binary
 *.pyc binary
-*.pdf binary
+*.pdf binary
\ No newline at end of file
diff --git a/RbDiffApp/.htaccess b/RbDiffApp/.htaccess
deleted file mode 100644
index 5204b4b..0000000
--- a/RbDiffApp/.htaccess
+++ /dev/null
@@ -1,44 +0,0 @@
-<ifModule mod_rewrite.c>
-
-
-  #######################################################################
-  # GENERAL                                                             #
-  #######################################################################
-
-  # Make apache follow sym links to files
-  Options +FollowSymLinks
-  # If somebody opens a folder, hide all files from the resulting folder list
-  IndexIgnore */*
-
-
-  #######################################################################
-  # REWRITING                                                           #
-  #######################################################################
-
-  # Enable rewriting
-  RewriteEngine On
-
-  # If its not HTTPS
-  RewriteCond %{HTTPS} off
-
-  # Comment out the RewriteCond above, and uncomment the RewriteCond below if you're using a load balancer (e.g. CloudFlare) for SSL
-  # RewriteCond %{HTTP:X-Forwarded-Proto} !https
-
-  # Redirect to the same URL with https://, ignoring all further rules if this one is in effect
-  RewriteRule ^(.*) https://%{HTTP_HOST}/$1 [R,L]
-
-  # If we get to here, it means we are on https://
-  
-  # If the file with the specified name in the browser doesn't exist
-  RewriteCond %{REQUEST_FILENAME} !-f
-
-  # and the directory with the specified name in the browser doesn't exist
-  RewriteCond %{REQUEST_FILENAME} !-d
-
-  # and we are not opening the root already (otherwise we get a redirect loop)
-  RewriteCond %{REQUEST_FILENAME} !\/$
-
-  # Rewrite all requests to the root
-  RewriteRule ^(.*) /
-
-</ifModule>
diff --git a/RbDiffApp/FILE-APPENDIX.md b/RbDiffApp/FILE-APPENDIX.md
deleted file mode 100644
index ea6374c..0000000
--- a/RbDiffApp/FILE-APPENDIX.md
+++ /dev/null
@@ -1,31 +0,0 @@
-# Files in the root folder
-
-* `.babelrc`: The Babel configuration. Babel is a ES6 to ES5 JavaScript transpiler, which means it's the tool that allows us to use ES6 in our applications.
-
-* `.eslintignore`: Tell `eslint`, the JavaScript linter I have installed in my IDE (and you should too) to ignore certain files I don't want to have linted. Linting a file means to check that the syntax of the language is correct, which helps us catch typos/structural errors before we get an error in the browser console.
-
-* `.eslintrc`: The `eslint` configuration, which checks that the JavaScript files are written in my preferred way of writing JS.
-
-* `.gitattributes`: Normalizes how `git`, the version control system this boilerplate uses, handles certain files.
-
-* `.gitignore`: Tells `git` to ignore certain files and folders which don't need to be version controlled, like the build folder.
-
-* `.htaccess`: A default server configuration for a single page applications for the Apache web server. See the [`README`](README.md) for more information.
-
-* `index.html`: The HTML file that your web application uses.
-
-* `makewebpackconfig.js`: Generates the webpack configuration based on the environment. If we're in development, we add hot reloading and don't minify our code. If we're in production, we minify everything.
-
-  * `webpack.dev.config.js`: Calls `makewebpackconfig.js`, setting the environment to `development`.
-
-  * `webpack.prod.config.js`: Calls `makewebpackconfig.js`, setting the environment to `production`.
-
-* `manifest.json`: Adds `Add to Homescreen` functionality on specific mobile phones. See the [`README`](README.md) for more information.
-
-* `package.json`: `npm`, the package manager this boilerplate uses, specifies the dependencies and tools we use in this file. When you run `npm install`, this is the list that tells `npm` which packages/libraries to download. Also, `npm start`, `npm run build`,... commands are specified here.
-
-* `server.js`: The development server, which allows us to go to `localhost:3000` and see the application live. Also makes hot-reloading work.
-
-* `serviceworker.js`: The script that tells the serviceworker how to cache our files.
-
-  * `serviceworker-cache-polyfill.js`: A polyfill for the `ServiceWorker` cache, which isn't yet fully supported everywhere. (See [https://jakearchibald.com/2014/using-serviceworker-today/](here) for more information)
diff --git a/RbDiffApp/README.md b/RbDiffApp/README.md
index 5effd85..0d9337c 100644
--- a/RbDiffApp/README.md
+++ b/RbDiffApp/README.md
@@ -38,73 +38,85 @@ Quick setup for new performance orientated, offline–first React.js application
 
 2. Upload the contents of the `build` folder to your web server.
 
-### Server Configuration
+3. ?????? (You figure this part out)
 
-#### Apache
+4. Profit!
 
-This boilerplate includes a `.htaccess` file that does two things:
+## CSS
 
-1. Redirect all traffic to HTTPS because ServiceWorker only works for encrypted traffic
+The CSS modules found in the `css` subfolders all get imported into the `main.css` file, which get inlined and minified into the `compiled.css` file. To add/change the styling, either write the CSS into the appropriate module or make a new one and `@import` it in the `main.css` file at the appropriate place.
 
-2. Rewrite all pages (e.g. yourdomain.com/subpage) to the `index.html` to let `react-router` take care of presenting the correct page
+### PostCSS Plugins
 
-## CSS
+The boilerplate uses PostCSS, and includes a few plugins by default:
 
-The CSS modules found in the `css` subfolders all get imported into one big file (`main.css`), which gets transpiled with PostCSS.
+* `postcss-import`: Inlines `@import`ed stylesheets to create one big stylesheet.
 
-To add/change styling, either add to an existing file or make a new one and `@import` it in the `main.css` file.
+* `postcss-simple-vars`: Makes it possible to use `$variables in your CSS.
 
-See the [`css` folder README](css/README.md) for more information about the PostCSS plugins used and the CSS structure.
+* `postcss-focus`: Adds a `:focus` selector to every `:hover`.
 
-## JS
+* `autoprefixer-core`: Prefixes your CSS automatically, supporting the last two versions of all major browsers and IE 8 and up.
 
-All files that are `import`ed/`require`d somewhere get compiled into one big file at build time. (`build/bundle.js`) Webpack automatically optimizes your JavaScript with `UglifyJS`, so you don't have to worry about that.
+* `cssnano`: Optimizes your CSS file. For a full list of optimizations check [the offical website](http://cssnano.co/optimisations/).
 
-See the [`js` folder README](js/README.md) for more information about the JS structure.
+* `postcss-reporter`: Makes warnings by the above plugins visible in the console.
 
-## Testing
+For a full, searchable catalog of plugins go to [postcss.parts](http://postcss.parts).
 
-Unit tests live in the `test` directory, and are run with `npm test`. There are two files in there already, testing that the current AppActions and Reducers are working correctly. Should you be stuck and have no idea what is going on check out the official [Mocha documentation](http://mochajs.org)!
+### Folder Structure
 
-## Files in the root folder
+The boilerplate comes with a basic folder structure to keep the CSS files organised. This is what the folders are for:
 
-For a full explanation of all files in the root folder, see [`FILE-APPENDIX.md`](FILE-APPENDIX.md).
+* `base`: Global styling, e.g. setting the box–model for all elements
 
-## Opinionated features
+* `components`: Component specific styling, e.g. buttons, modals,...
 
-### Web Fonts
+* `layout`: Global layouts, e.g. article, homepage,...
 
-If you simply use web fonts in your project, the page will stay blank until these fonts are downloaded. That means a lot of waiting time in which users could already read the content.
+* `utils`: Utility files, e.g. variables, mixins, functions,...
 
-[FontFaceObserver](https://github.com/bramstein/fontfaceobserver) adds a `js-<font-name>-loaded` class to the `body` when the fonts have loaded. You should specify an initial `font-family` with save fonts on the `body`, and a `.js-<font-name>-loaded` `font-family` which includes your web font. See [app.js](js/app.js#L17-L25) and [base.css](css/base/_base.css#L26-L32).
+* `vendor`: External files, e.g. a CSS reset
 
-#### Adding a new font
+## JS
 
-1. Either add the `@font-face` declaration to `base/_fonts.css` or add a `<link>` tag to the [`index.html`](index.html). (Don't forget to remove the `<link>` for Open Sans from the [`index.html`](index.html))
+All files that are `import`ed/`require`d somewhere get compiled into one big file at build time. (`build/bundle.js`) Webpack automatically optimizes your JavaScript with `UglifyJS`, so you do not have to worry about that.
 
-2. In `base/_base.css`, specify your initial `font-family` in the `body` tag with only save fonts. In the `body.js-<font-name>-loaded` tag, specify your `font-family` stack with your web font.
+### Folder Structure
 
-3. In `js/app.js` add a `<font-name>Observer` for your font.
+The folder structure of the JS files reflects how [Redux](https://github.com/gaearon/redux) works, so if you are not familiar with Redux check out the [official documentation](https://gaearon.github.io/redux/).
 
-#### Removing performant web font loading
+* `actions`: Actions get dispatched with this/these utility module(s)
 
-**Careful** about removing this, as perceived performance might be highly impacted.
+* `components`: The main JS folder. All your React components should be in this folder, for big projects they might be grouped into seperate subfolders. E.g. a navigation component `Nav.react.js`
 
-To remove `FontFaceObserver`, don't import it in [`app.js`](js/app.js) and remove it from the [`package.json`](package.json).
+* `constants`: Action constants need to be defined in this/these utility module(s)
 
-### Offline access
+* `reducers`: Reducers manage the state of an app, basically a simplified implementation of Stores in Flux. For an introduction to reducers, watch [this talk](https://www.youtube.com/watch?v=xsSnOQynTHs) by @gaearon.
+
+## Testing
 
-Using a `ServiceWorker` and the `Application Cache`, your application is cached for offline usage.
+Unit tests live in the `test` directory, and are run with `npm test`. There are two files in there already, testing that the current AppActions and Reducers are working correctly. Should you be stuck and have no idea what is going on check out the official [Mocha documentation](http://mochajs.org)!
+
+## Opinionated features
+
+### Web Fonts
 
-#### Cache a new file
+If you simply use web fonts in your project, the page will stay blank until these fonts are downloaded. That means a lot of waiting time in which users could already read the content.
 
-To cache a file, add it to the `urlsToCache` variable in the [`serviceworker.js`](serviceworker.js) file.
+[FontFaceObserver](https://github.com/bramstein/fontfaceobserver) adds a `js-<font-name>-loaded` class to the `body` when the fonts have loaded. You should specify an initial `font-family` with save fonts, and a `.js-<font-name>-loaded` `font-family` which includes your web font.
 
-#### Removing offline access
+#### Adding a new font
 
-**Careful** about removing this, as there is no real downside to having your application available when the users network connection isn't perfect.
+1. Add the `@font-face` declaration to `base/_fonts.css`.
 
-To remove offline capability, delete [`serviceworker.js`](serviceworker.js) and [`serviceworker-cache-polyfill.js`](serviceworker-cache-polyfill.js), don't import them in the [`app.js`](js/app.js), remove `AppCachePlugin` in [`makewebpackconfig.js`](makewebpackconfig.js) and remove the `manifest` attribute of the `<html>` tag in [`index.html`](index.html).
+2. In `base/_base.css`, specify your initial `font-family` in the `body` tag with only save fonts. In the `body.js-<font-name>-loaded` tag, specify your `font-family` stack with your web font.
+
+3. In `js/app.js` add a `<font-name>Observer` for your font.
+
+### Offline access
+
+Using a `ServiceWorker` and the `App Cache`, your application is cached for offline usage. TO cache a file, add it to `cache` variable of the `AppCachePlugin` in `webpack.build.config.js` and to the `urlsToCache` variable in the `serviceworker.js` file.
 
 ### Add To Homescreen
 
@@ -112,10 +124,6 @@ On Chrome for Android (soon hopefully more browsers), users can add a webpage to
 
 The name and icon to be displayed are set in the `manifest.json` file. Change them to your project name and icon, and try it!
 
-#### Removing add to homescreen functionality
-
-Delete [`manifest.json`](manifest.json) and remove the `<link rel="manifest" href="manifest.json">` tag from the [`index.html`](index.html).
-
 ## Gotchas
 
 These are some things to be aware of when using this boilerplate.
@@ -142,4 +150,4 @@ Then webpack will correctly transfer the image to the build folder.
 
 ## License
 
-This project is licensed under the MIT license, Copyright (c) 2015 Maximilian Stoiber. For more information see `LICENSE.md`.
+This project is licensed under the MIT license, Copyright (c) 2015 Maximilian Stoiber. For more information see `LICENSE.md`.
\ No newline at end of file
diff --git a/RbDiffApp/css/README.md b/RbDiffApp/css/README.md
deleted file mode 100644
index cd63ef9..0000000
--- a/RbDiffApp/css/README.md
+++ /dev/null
@@ -1,35 +0,0 @@
-# `css`
-
-## PostCSS Plugins
-
-The boilerplate uses PostCSS, and includes a few plugins by default:
-
-* `postcss-import`: Inlines `@import`ed stylesheets to create one big stylesheet.
-
-* `postcss-simple-vars`: Makes it possible to use `$variables in your CSS.
-
-* `postcss-focus`: Adds a `:focus` selector to every `:hover`.
-
-* `autoprefixer-core`: Prefixes your CSS automatically, supporting the last two versions of all major browsers and IE 8 and up.
-
-* `cssnano`: Optimizes your CSS file. For a full list of optimizations check [the offical website](http://cssnano.co/optimisations/).
-
-* `postcss-reporter`: Makes warnings by the above plugins visible in the console.
-
-For a full, searchable catalog of plugins go to [postcss.parts](http://postcss.parts).
-
-## Folder structure
-
-The boilerplate comes with a basic folder structure to keep the CSS files organised. This is what the folders are for:
-
-* `base`: Global styling, e.g. setting the box–model for all elements
-
-* `components`: Component specific styling, e.g. buttons, modals,...
-
-* `layout`: Global layouts, e.g. article, homepage,...
-
-* `utils`: Utility files, e.g. variables, mixins, functions,...
-
-* `vendor`: External files, e.g. a CSS reset
-
-* `main.css`: All CSS files from the above directories are `@import`ed into this file and inlined with `postcss-import`.
diff --git a/RbDiffApp/css/base/_fonts.css b/RbDiffApp/css/base/_fonts.css
index 39f7926..2cbc83b 100644
--- a/RbDiffApp/css/base/_fonts.css
+++ b/RbDiffApp/css/base/_fonts.css
@@ -1 +1,29 @@
 /* This file contains all @font-face declarations, if any. */
+
+/*
+ * Open Sans
+ */
+/* BEGIN Regular */
+@font-face {
+  font-family: 'Open Sans';
+  src: url("./fonts/Regular/OpenSans-Regular.eot?v=1.1.0");
+  src: url("./fonts/Regular/OpenSans-Regular.eot?#iefix&v=1.1.0") format("embedded-opentype"), url("./fonts/Regular/OpenSans-Regular.woff2?v=1.1.0") format("woff2"), url("./fonts/Regular/OpenSans-Regular.woff?v=1.1.0") format("woff"), url("./fonts/Regular/OpenSans-Regular.ttf?v=1.1.0") format("truetype"), url("./fonts/Regular/OpenSans-Regular.svg?v=1.1.0#Regular") format("svg");
+  font-weight: normal;
+  font-style: normal; }
+/* END Regular */
+/* BEGIN Italic */
+@font-face {
+  font-family: 'Open Sans';
+  src: url("./fonts/Italic/OpenSans-Italic.eot?v=1.1.0");
+  src: url("./fonts/Italic/OpenSans-Italic.eot?#iefix&v=1.1.0") format("embedded-opentype"), url("./fonts/Italic/OpenSans-Italic.woff2?v=1.1.0") format("woff2"), url("./fonts/Italic/OpenSans-Italic.woff?v=1.1.0") format("woff"), url("./fonts/Italic/OpenSans-Italic.ttf?v=1.1.0") format("truetype"), url("./fonts/Italic/OpenSans-Italic.svg?v=1.1.0#Italic") format("svg");
+  font-weight: normal;
+  font-style: italic; }
+/* END Italic */
+/* BEGIN Bold */
+@font-face {
+  font-family: 'Open Sans';
+  src: url("./fonts/Bold/OpenSans-Bold.eot?v=1.1.0");
+  src: url("./fonts/Bold/OpenSans-Bold.eot?#iefix&v=1.1.0") format("embedded-opentype"), url("./fonts/Bold/OpenSans-Bold.woff2?v=1.1.0") format("woff2"), url("./fonts/Bold/OpenSans-Bold.woff?v=1.1.0") format("woff"), url("./fonts/Bold/OpenSans-Bold.ttf?v=1.1.0") format("truetype"), url("./fonts/Bold/OpenSans-Bold.svg?v=1.1.0#Bold") format("svg");
+  font-weight: bold;
+  font-style: normal; }
+/* END Bold */
\ No newline at end of file
diff --git a/RbDiffApp/index.html b/RbDiffApp/index.html
index 808ce72..7acf97e 100644
--- a/RbDiffApp/index.html
+++ b/RbDiffApp/index.html
@@ -11,8 +11,7 @@
 	<body>
 		<!-- The app hooks into this div -->
 		<div id="app"></div>
-		<!-- Open Sans Font -->
-		<link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700" rel="stylesheet">
-		<!-- Due to the way webpack works, a lot of magic happens in this file. HtmlWebpackPlugin automatically includes all assets (e.g. bundle.js, main.css) with the correct HTML tags, which is why they are missing in this HTML file. Check out webpackconfig.js if you want to know more. -->
+		<!-- The JavaScript bundle -->
+		<script src="js/bundle.js"></script>
 	</body>
 </html>
diff --git a/RbDiffApp/js/README.md b/RbDiffApp/js/README.md
deleted file mode 100644
index 40cefc2..0000000
--- a/RbDiffApp/js/README.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# `js`
-
-## Folder Structure
-
-The folder structure of the JS files reflects how [Redux](https://github.com/gaearon/redux) works, so if you are not familiar with Redux check out the [official documentation](https://gaearon.github.io/redux/).
-
-* `actions`: Actions get dispatched with this/these utility module(s)
-
-* `components`: The main JS folder. All your React components should be in this folder, for big projects they might be grouped into seperate subfolders. E.g. a navigation component `Nav.react.js`
-
-* `components/pages`: Actual pages (routes) users can visit.
-
-* `constants`: Action constants need to be defined in this/these utility module(s)
-
-* `reducers`: Reducers manage the state of an app, basically a simplified implementation of Stores in Flux. For an introduction to reducers, watch [this talk](https://www.youtube.com/watch?v=xsSnOQynTHs) by @gaearon.
-
-* `app.js`: The entry point of the application. Mostly setup and boilerplate code. Routes are configured in the JSX here!
diff --git a/RbDiffApp/js/actions/AppActions.js b/RbDiffApp/js/actions/AppActions.js
index ed499d4..618d3e8 100644
--- a/RbDiffApp/js/actions/AppActions.js
+++ b/RbDiffApp/js/actions/AppActions.js
@@ -1,28 +1,3 @@
-/*
- * Actions change things in your application
- * Since this boilerplate uses a uni-directional data flow, specifically redux,
- * we have these actions which are the only way your application interacts with
- * your appliction state. This guarantees that your state is up to date and nobody
- * messes it up weirdly somewhere.
- *
- * To add a new Action:
- * 1) Import your constant
- * 2) Add a function like this:
- *    export function yourAction(var) {
- *        return { type: YOUR_ACTION_CONSTANT, var: var }
- *    }
- * 3) (optional) Add an async function like this:
- *    export function asyncYourAction(var) {
- *        return function(dispatch) {
- *             // Do async stuff here
- *             return dispatch(yourAction(var));
- *        }
- *    }
- *
- *    If you add an async function, remove the export from the function
- *    created in the second step
- */
-
 import { CHANGE_OWNER_NAME, CHANGE_PROJECT_NAME } from '../constants/AppConstants';
 
 export function asyncChangeProjectName(name) {
@@ -43,10 +18,10 @@ export function asyncChangeOwnerName(name) {
   }
 }
 
-export function changeProjectName(name) {
+function changeProjectName(name) {
   return { type: CHANGE_PROJECT_NAME, name };
 }
 
-export function changeOwnerName(name) {
+function changeOwnerName(name) {
   return { type: CHANGE_OWNER_NAME, name };
 }
diff --git a/RbDiffApp/js/app.js b/RbDiffApp/js/app.js
index 96d8231..c4714f4 100644
--- a/RbDiffApp/js/app.js
+++ b/RbDiffApp/js/app.js
@@ -1,19 +1,8 @@
-/**
- *
- * app.js
- *
- * This is the entry file for the application, mostly just setup and boilerplate
- * code. Routes are configured at the end of this file!
- *
- */
-
-// Load the ServiceWorker, the Cache polyfill, the manifest.json file and the .htaccess file
 import 'file?name=[name].[ext]!../serviceworker.js';
 import 'file?name=[name].[ext]!../serviceworker-cache-polyfill.js';
 import 'file?name=[name].[ext]!../manifest.json';
-import 'file?name=[name].[ext]!../.htaccess';
+import 'fontfaceobserver/fontfaceobserver.js';
 
-// Check for ServiceWorker support before trying to install it
 if ('serviceWorker' in navigator) {
   navigator.serviceWorker.register('/serviceworker.js').then(() => {
     // Registration was successful
@@ -24,18 +13,7 @@ if ('serviceWorker' in navigator) {
   // No ServiceWorker Support
 }
 
-// Import all the third party stuff
-import React from 'react';
-import ReactDOM from 'react-dom';
-import { createStore, applyMiddleware } from 'redux';
-import thunk from 'redux-thunk';
-import { Provider } from 'react-redux';
-import { homeReducer } from './reducers/reducers';
-import { Router, Route } from 'react-router';
-import FontFaceObserver from 'fontfaceobserver';
-import createHistory from 'history/lib/createBrowserHistory';
-
-// Observer loading of Open Sans (to remove open sans, remove the <link> tag in the index.html file and this observer)
+// Observer loading of Open Sans
 const openSansObserver = new FontFaceObserver('Open Sans', {});
 
 // When Open Sans is loaded, add the js-open-sans-loaded class to the body
@@ -45,30 +23,29 @@ openSansObserver.check().then(() => {
   document.body.classList.remove('js-open-sans-loaded');
 });
 
-// Import the pages
-import HomePage from './components/pages/HomePage.react';
-import ReadmePage from './components/pages/ReadmePage.react';
-import NotFoundPage from './components/pages/NotFound.react';
-import App from './components/App.react';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import { createStore, applyMiddleware } from 'redux';
+import thunk from 'redux-thunk';
+import { Provider } from 'react-redux';
+import { homeReducer } from './reducers/reducers';
+import { Router, Route } from 'react-router';
+import createHistory from 'history/lib/createBrowserHistory';
+
+import HomePage from './components/HomePage.react';
+import ReadmePage from './components/ReadmePage.react';
 
-// Import the CSS file, which HtmlWebpackPlugin transfers to the build folder
 import '../css/main.css';
 
-// Creates the Redux reducer with the redux-thunk middleware, which allows us
-// to do asynchronous things in the actions
 const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);
+
 const store = createStoreWithMiddleware(homeReducer);
 
-// Mostly boilerplate, except for the Routes. These are the pages you can go to,
-// which are all wrapped in the App component, which contains the navigation etc
 ReactDOM.render(
   <Provider store={store}>
     <Router history={createHistory()}>
-      <Route component={App}>
-        <Route path="/" component={HomePage} />
-        <Route path="/readme" component={ReadmePage} />
-        <Route path="*" component={NotFoundPage} />
-      </Route>
+      <Route path="/" component={HomePage} />
+      <Route path="/readme" component={ReadmePage} />
     </Router>
   </Provider>,
   document.getElementById('app')
diff --git a/RbDiffApp/js/components/App.react.js b/RbDiffApp/js/components/App.react.js
deleted file mode 100644
index 000ed8c..0000000
--- a/RbDiffApp/js/components/App.react.js
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- *
- * App.react.js
- *
- * This component is the skeleton around the actual pages, and should only
- * contain code that should be seen on all pages. (e.g. navigation bar)
- */
-
-import React, { Component } from 'react';
-import { connect } from 'react-redux';
-import Logo from '../../img/logo.png';
-
-class App extends Component {
-  render() {
-    return (
-      <div className="wrapper">
-        <img className="logo" src={Logo} />
-        { this.props.children }
-      </div>
-    );
-  }
-}
-
-// REDUX STUFF
-
-// Which props do we want to inject, given the global state?
-function select(state) {
-  return {
-    data: state
-  };
-}
-
-// Wrap the component to inject dispatch and state into it
-export default connect(select)(App);
diff --git a/RbDiffApp/js/components/pages/HomePage.react.js b/RbDiffApp/js/components/HomePage.react.js
similarity index 78%
rename from RbDiffApp/js/components/pages/HomePage.react.js
rename to RbDiffApp/js/components/HomePage.react.js
index 6254eb5..7a95321 100644
--- a/RbDiffApp/js/components/pages/HomePage.react.js
+++ b/RbDiffApp/js/components/HomePage.react.js
@@ -1,19 +1,15 @@
-/*
- * HomePage
- * This is the first thing users see of our App
- */
-
-import { asyncChangeProjectName, asyncChangeOwnerName } from '../../actions/AppActions';
+import { asyncChangeProjectName, asyncChangeOwnerName } from '../actions/AppActions';
 import React, { Component } from 'react';
 import { connect } from 'react-redux';
 import { Link } from 'react-router';
+import Logo from '../../img/logo.png';
 
 class HomePage extends Component {
 	render() {
-    const dispatch = this.props.dispatch;
-    const { projectName, ownerName } = this.props.data;
+    const { dispatch, projectName, ownerName } = this.props;
     return (
-			<div>
+			<div className="wrapper">
+        <img className="logo" src={Logo} />
 				<h1>Hello World!</h1>
         <h2>This is the demo for the <span className="home__text--red">{ projectName }</span> by <a href={'https://twitter.com/' + ownerName} >@{ ownerName }</a></h2>
         <label className="home__label">Change to your project name:
@@ -28,12 +24,12 @@ class HomePage extends Component {
   }
 }
 
-// REDUX STUFF
-
 // Which props do we want to inject, given the global state?
+// Note: use https://github.com/faassen/reselect for better performance.
 function select(state) {
   return {
-    data: state
+    ownerName: state.ownerName,
+    projectName: state.projectName
   };
 }
 
diff --git a/RbDiffApp/js/components/pages/ReadmePage.react.js b/RbDiffApp/js/components/ReadmePage.react.js
similarity index 86%
rename from RbDiffApp/js/components/pages/ReadmePage.react.js
rename to RbDiffApp/js/components/ReadmePage.react.js
index a603731..8efaf3a 100644
--- a/RbDiffApp/js/components/pages/ReadmePage.react.js
+++ b/RbDiffApp/js/components/ReadmePage.react.js
@@ -1,16 +1,12 @@
-/*
- * ReadmePage
- *
- * This is the page users see when they click the "Setup" button on the HomePage
- */
-
 import React, { Component} from 'react';
 import { Link } from 'react-router';
+import Logo from '../../img/logo.png';
 
 export default class AboutPage extends Component {
 	render() {
     return (
-    	<div>
+    		<div className="wrapper">
+    			<img className="logo" src={Logo} />
 				<h2>Further Setup</h2>
 				<p>Assuming you have already cloned the repo and ran all the commands from the README (otherwise you would not be here), these are the further steps:</p>
 
diff --git a/RbDiffApp/js/components/pages/NotFound.react.js b/RbDiffApp/js/components/pages/NotFound.react.js
deleted file mode 100644
index 3e9a930..0000000
--- a/RbDiffApp/js/components/pages/NotFound.react.js
+++ /dev/null
@@ -1,15 +0,0 @@
-import React, { Component } from 'react';
-import { Link } from 'react-router';
-
-class NotFound extends Component {
-  render() {
-    return(
-      <article>
-        <h1>Page not found.</h1>
-        <Link to="/" className="btn">Home</Link>
-      </article>
-    );
-  }
-}
-
-export default NotFound;
diff --git a/RbDiffApp/js/constants/AppConstants.js b/RbDiffApp/js/constants/AppConstants.js
index 4deae2f..ae94da7 100644
--- a/RbDiffApp/js/constants/AppConstants.js
+++ b/RbDiffApp/js/constants/AppConstants.js
@@ -1,10 +1,2 @@
-/*
- * AppConstants
- * These are the variables that determine what our central data store (reducer.js)
- * changes in our state. When you add a new action, you have to add a new constant here
- *
- * Follow this format:
- * export const YOUR_ACTION_CONSTANT = 'YOUR_ACTION_CONSTANT';
- */
 export const CHANGE_PROJECT_NAME = 'CHANGE_PROJECT_NAME';
 export const CHANGE_OWNER_NAME = 'CHANGE_OWNER_NAME';
diff --git a/RbDiffApp/js/reducers/reducers.js b/RbDiffApp/js/reducers/reducers.js
index 98cef7f..5f5764c 100644
--- a/RbDiffApp/js/reducers/reducers.js
+++ b/RbDiffApp/js/reducers/reducers.js
@@ -1,15 +1,3 @@
-/*
- * The reducer takes care of our data
- * Using actions, we can change our application state
- * To add a new action, add it to the switch statement in the homeReducer function
- *
- * Example:
- * case YOUR_ACTION_CONSTANT:
- *   return assign({}, state, {
- *       stateVariable: action.var
- *   });
- */
-
 import { CHANGE_OWNER_NAME, CHANGE_PROJECT_NAME } from '../constants/AppConstants';
 const assign = Object.assign || require('object.assign');
 
diff --git a/RbDiffApp/makewebpackconfig.js b/RbDiffApp/makewebpackconfig.js
index 3210222..b83e346 100644
--- a/RbDiffApp/makewebpackconfig.js
+++ b/RbDiffApp/makewebpackconfig.js
@@ -2,7 +2,6 @@ var path = require('path');
 var webpack = require('webpack');
 var HtmlWebpackPlugin = require('html-webpack-plugin');
 var AppCachePlugin = require('appcache-webpack-plugin');
-var ExtractTextPlugin = require("extract-text-webpack-plugin");
 
 module.exports = function(options) {
   var entry, jsLoaders, plugins, cssLoaders;
@@ -13,7 +12,7 @@ module.exports = function(options) {
     entry = [
       path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
     ];
-    cssLoaders = ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader');
+    cssLoaders = ['file-loader?name=[path][name].[ext]', 'postcss-loader'];
     // Plugins
     plugins = [// Plugins for Webpack
       new webpack.optimize.UglifyJsPlugin({ // Optimize the JavaScript...
@@ -23,7 +22,7 @@ module.exports = function(options) {
       }),
       new HtmlWebpackPlugin({
         template: 'index.html', // Move the index.html file...
-        minify: { // Minifying it while it is parsed
+        minify: { // Minifying it while it is parsed using the following, self–explanatory options
           removeComments: true,
           collapseWhitespace: true,
           removeRedundantAttributes: true,
@@ -34,11 +33,11 @@ module.exports = function(options) {
           minifyJS: true,
           minifyCSS: true,
           minifyURLs: true
-        },
-        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
+        }
       }),
-      new AppCachePlugin(),
-      new ExtractTextPlugin("css/main.css")
+      new AppCachePlugin({
+        cache: ['index.html', 'js/bundle.js', 'serviceworker.js']
+      })
     ];
 
   // If app is in development
@@ -49,15 +48,10 @@ module.exports = function(options) {
       "webpack/hot/only-dev-server", // See above
       path.resolve(__dirname, 'js/app.js') // Start with js/app.js...
     ];
-    cssLoaders = 'style-loader!css-loader!postcss-loader';
+    cssLoaders = ['style-loader', 'css-loader', 'postcss-loader'];
     // Only plugin is the hot module replacement plugin
     plugins = [
-      new webpack.HotModuleReplacementPlugin(), // Make hot loading work
-      new HtmlWebpackPlugin({
-        template: 'index.html', // Move the index.html file
-        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
-      }),
-      new AppCachePlugin()
+      new webpack.HotModuleReplacementPlugin() // Make hot loading work
     ]
   }
 
@@ -74,7 +68,7 @@ module.exports = function(options) {
           exclude: path.join(__dirname, '/node_modules/') // ...except for the node_modules folder.
         }, {
           test:   /\.css$/, // Transform all .css files required somewhere within an entry point...
-          loader: cssLoaders // ...with PostCSS
+          loaders: cssLoaders // ...with PostCSS
         }, {
           test: /\.jpe?g$|\.gif$|\.png$/i,
           loader: "url-loader?limit=10000"
@@ -103,4 +97,4 @@ module.exports = function(options) {
     stats: false, // Don't show stats in the console
     progress: true
   }
-}
+}
\ No newline at end of file
diff --git a/RbDiffApp/package.json b/RbDiffApp/package.json
index cb3fb51..b8b6da0 100644
--- a/RbDiffApp/package.json
+++ b/RbDiffApp/package.json
@@ -1,10 +1,10 @@
 {
   "name": "reactjs-boilerplate",
-  "version": "2.4.0",
+  "version": "2.3.0",
   "description": "Quick setup for new React.js applications featuring Redux, hot–reloading, PostCSS, react-router and Mocha.",
   "dependencies": {
     "fontfaceobserver": "^1.5.1",
-    "history": "1.13.1",
+    "history": "^1.13.1",
     "react": "^0.14.2",
     "react-dom": "^0.14.2",
     "react-redux": "^4.0.0",
@@ -26,7 +26,6 @@
     "eslint-config-airbnb": "1.0.0",
     "eslint-plugin-react": "^3.3.2",
     "expect": "^1.10.0",
-    "extract-text-webpack-plugin": "0.9.1",
     "file-loader": "^0.8.4",
     "html-webpack-plugin": "^1.6.1",
     "json-loader": "^0.5.2",
@@ -49,8 +48,8 @@
   },
   "scripts": {
     "test": "mocha --compilers js:babel/register --recursive",
-    "start": "NODE_ENV=development node server.js",
-    "build": "npm run test && NODE_ENV=production webpack --config webpack.prod.config.js --progress --colors -p"
+    "start": "NODE_ENV=development && node server.js",
+    "build": "npm run test && NODE_ENV=production && webpack --config webpack.prod.config.js --progress --colors -p"
   },
   "author": "Max Stoiber",
   "license": "MIT"
diff --git a/RbDiffApp/serviceworker.js b/RbDiffApp/serviceworker.js
index 96d5898..b293662 100644
--- a/RbDiffApp/serviceworker.js
+++ b/RbDiffApp/serviceworker.js
@@ -4,7 +4,6 @@ var CACHE_NAME = 'react-boilerplate-cache-v1';
 // The files we want to cache
 var urlsToCache = [
   '/',
-  '/css/main.css',
   '/js/bundle.js'
 ];
 
@@ -61,4 +60,4 @@ self.addEventListener('fetch', function(event) {
         );
       })
     );
-});
+});
\ No newline at end of file
